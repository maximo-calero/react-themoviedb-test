{"version":3,"sources":["components/styled/MenuComponents.ts","components/header/Header.tsx","common/StringConstants.ts","service/DataService.ts","components/common/styled/CommonComponents.ts","components/common/MediaCard.tsx","components/common/SearchResults.tsx","components/home/Home.tsx","components/about/About.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuBar","styled","ul","MenuItem","li","Header","to","stringConstants","DataService","apiUrl","apiKey","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","o","reduce","res","key","Object","create","getApiJson","configuration","obj","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","strEnum","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","searchTerm","query","searchMovie","total_results","page","totalResults","totalPages","total_pages","movies","results","map","item","id","title","overview","shortDescription","length","substr","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","StyledCard","Card","maxWidth","StyledCardMedia","CardMedia","height","SearchMovieResultsContainer","Container","flexGrow","StyledPaper","Paper","padding","textAlign","color","MediaCard","props","CardActionArea","image","CardContent","Typography","gutterBottom","variant","component","contentTitle","contentDescription","CardActions","Button","size","React","Component","SearchMovieResults","Grid","container","spacing","imageBaseUrl","Home","dataService","emptyConfiguration","emptySearchResults","state","searchResults","getConfiguration","conf","searchMovies","testSearch","setState","secureUrl","imageUrl","w154","About","Main","exact","path","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa72db8b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const MenuBar = styled.ul `\r\n    list-style: none; \r\n    display: flex; \r\n    margin-top: 6px;\r\n    width: 85%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    font-size: 1.15em;\r\n    color: rgb(102, 102, 102);\r\n    width:80%;    \r\n`\r\n\r\nexport const MenuItem = styled.li `\r\n    flex: 3;\r\n    :hover {\r\n        color: rgb(0, 120, 212);\r\n    }\r\n    a {\r\n        display: block;\r\n        text-align: center;\r\n        padding: 5px 16px;\r\n        text-decoration: none;\r\n        color: rgb(102, 102, 102);        \r\n    }\r\n`\r\n\r\n// export const NavigationItemLink = styled.a`\r\n//     display: block;\r\n//     text-align: center;\r\n//     padding: 5px 16px;\r\n//     text-decoration: none;\r\n//     color: rgb(102, 102, 102);\r\n// `","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { MenuBar, MenuItem } from '../styled/MenuComponents'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <MenuBar>\r\n                    <MenuItem><Link to='/'>Home</Link></MenuItem>\r\n                    <MenuItem><Link to='/about'>About</Link></MenuItem>\r\n                </MenuBar>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'searchMovie': '/search/movie'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query='\r\n    }\r\n};","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY) {\r\n            this.apiUrl = process.env.API_URL\r\n            this.apiKey = process.env.API_KEY\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText)\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    private strEnum<T extends string>(o: Array<T>): {[K in T]: K} {\r\n        return o.reduce((res, key) => {\r\n          res[key] = key;\r\n          return res;\r\n        }, Object.create(null));\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: this.strEnum(obj.images.backdrop_sizes),\r\n                logoSizes: this.strEnum(obj.images.logo_sizes),\r\n                posterSizes: this.strEnum(obj.images.poster_sizes),\r\n                profileSizes: this.strEnum(obj.images.profile_sizes),\r\n                stillSizes: this.strEnum(obj.images.still_sizes)\r\n            },\r\n            changeKeys: this.strEnum(obj.change_keys)\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n    public async searchMovies(searchTerm: string): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                movies: (obj.results as any[]).map(item => {\r\n                    return {\r\n                        id: item.id,\r\n                        title: item.title,\r\n                        overview: item.overview,\r\n                        shortDescription: item.overview \r\n                                            ? (item.overview as string).length > 128\r\n                                                ? `${(item.overview as string).substr(0, 125)}...`\r\n                                                : (item.overview as string)\r\n                                            : '',\r\n                        popularity: item.popularity,\r\n                        video: item.video,\r\n                        voteCount: item.vote_count,\r\n                        voteAverage: item.vote_average,\r\n                        releaseDate: item.release_date,\r\n                        originalLanguage: item.original_language,\r\n                        originalTitle: item.original_title,\r\n                        genreIds: item.genre_ids,\r\n                        backdropPath: item.backdrop_path,\r\n                        adult: item.adult,\r\n                        posterPath: item.poster_path\r\n                    }\r\n                })\r\n            };    \r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                movies: []\r\n            };\r\n        }\r\n    }\r\n\r\n}","import { styled } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport const StyledCard = styled(Card)({\r\n    maxWidth: 345,\r\n});\r\n\r\nexport const StyledCardMedia = styled(CardMedia)({\r\n    height: 140,\r\n});\r\n\r\nexport const SearchMovieResultsContainer = styled(Container) ({\r\n    flexGrow: 1,\r\n});\r\n\r\nexport const StyledPaper = styled(Paper) ({\r\n    padding: 12,\r\n    textAlign: 'center',\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n});","import React from 'react';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MediaCardProps } from './ControlInterfaces';\r\nimport { StyledCard, StyledCardMedia } from './styled/CommonComponents';\r\n\r\nclass MediaCard extends React.Component<MediaCardProps> {\r\n  constructor(props: MediaCardProps) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCard>\r\n        <CardActionArea>\r\n          <StyledCardMedia\r\n            image={this.props.image}\r\n            title={this.props.title}\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {this.props.contentTitle}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {this.props.contentDescription}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Learn More\r\n          </Button>\r\n        </CardActions>\r\n      </StyledCard>\r\n    );\r\n  \r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport { SearchResultsProps } from './ControlInterfaces';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { StyledPaper, SearchMovieResultsContainer } from './styled/CommonComponents';\r\nimport MediaCard from './MediaCard';\r\n\r\nclass SearchMovieResults extends React.Component<SearchResultsProps> {\r\n    constructor(props: SearchResultsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <SearchMovieResultsContainer>\r\n                <Grid container spacing={1}>\r\n                    {this.props.movies.length === 0 &&\r\n                        <StyledPaper>No results</StyledPaper>\r\n                    }\r\n                    {this.props.movies.length > 0 &&\r\n                        this.props.movies.map(item => {\r\n                            return (\r\n                                <Grid key={item.id} item>\r\n                                    <MediaCard \r\n                                            title={item.title} \r\n                                            image={`${this.props.imageBaseUrl}${item.posterPath}`}\r\n                                            contentTitle={item.title}\r\n                                            contentDescription={item.shortDescription}\r\n                                                />                                \r\n                                </Grid>                            \r\n                            );\r\n                        })\r\n\r\n                    }\r\n                </Grid>\r\n            </SearchMovieResultsContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchMovieResults;","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../service/DataService';\r\nimport { Configuration, SearchResults } from '../../model';\r\nimport SearchMovieResults from '../common/SearchResults';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n    emptyConfiguration: Configuration = {\r\n            images: {\r\n                baseUrl: '',\r\n                secureBaseUrl: '',\r\n                backdropSizes: [],\r\n                logoSizes: [],\r\n                posterSizes: [],\r\n                profileSizes: [],\r\n                stillSizes: []\r\n            },\r\n            changeKeys: []\r\n    \r\n    };\r\n    emptySearchResults: SearchResults = {\r\n        page: 0,\r\n        totalPages: 0,\r\n        totalResults: 0,\r\n        movies: []\r\n    };\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: this.emptyConfiguration,\r\n            searchResults: this.emptySearchResults\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const testSearch: SearchResults = await this.dataService.searchMovies('Godfather');\r\n        this.setState({ configuration: conf, searchResults: testSearch });\r\n\r\n    }\r\n\r\n    render() {\r\n        const secureUrl: string = this.state.configuration.images.secureBaseUrl !== ''\r\n                                ? this.state.configuration.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w154}/` : '';\r\n        return (\r\n            <div>\r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchMovieResults imageBaseUrl={imageUrl} movies={this.state.searchResults.movies} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <p>About page</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\n\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/about' component={About}/>\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/Header';\r\nimport Main from './components/Main';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\">\r\n        <Header />\r\n        <Main />\r\n      </Container>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}