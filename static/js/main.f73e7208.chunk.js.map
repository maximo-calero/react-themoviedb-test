{"version":3,"sources":["images/default-image_300.png","components/styled/MenuComponents.ts","components/header/Header.tsx","common/StringConstants.ts","common/FunctionsHelper.ts","service/DataService.ts","components/common/styled/CommonComponents.ts","components/common/MediaCard.tsx","components/common/SearchContentResults.tsx","components/common/SearchDefinition.tsx","components/common/ItemDetailDialog.tsx","components/home/Home.tsx","components/about/About.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuBar","styled","ul","MenuItem","li","Header","to","stringConstants","stringToEnum","obj","reduce","res","key","Object","create","stringToDate","stringDate","stringArray","split","Date","DataService","apiUrl","apiKey","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","type","getApiJson","genre","genres","length","map","item","id","name","keywords","configuration","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","searchTerm","page","query","toString","searchMovie","total_results","movies","results","title","overview","shortDescription","substr","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","totalResults","totalPages","total_pages","searchTvShow","tvShows","first_air_date","originalName","original_name","originCountry","origin_country","AppContainer","styledmui","Container","HomeContainer","display","flexDirection","alignItems","StyledCard","Card","width","height","StyledTitle","Typography","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","StyledDescription","StyledCardActionArea","CardActionArea","minHeight","StyledCardMedia","CardMedia","backgroundSize","StyledCardAction","CardActions","padding","justifyContent","StyledCardActionSpanDiv","div","StyledCardActionSpan","span","paddingLeft","StyledEventTwoTone","EventTwoTone","fill","transition","flexShrink","userSelect","StyledRateReviewTwoTone","RateReviewTwoTone","SearchMovieResultsContainer","flexGrow","StyledPaper","Paper","textAlign","color","SearchDefinitionPaper","marginBottom","backgroundColor","SearchDefinitionIconButton","IconButton","SearchInput","TextField","root","borderBottomColor","borderColor","marginLeft","flex","SearchResults","InfiniteScroll","flexWrap","SearchResultItem","margin","boxSizing","MediaCard","handleClickCard","event","props","onClickCard","currentTarget","onClick","image","defaultImage","CardContent","gutterBottom","variant","contentTitle","contentDescription","titleAccess","React","Component","SearchContentResults","loader","className","items","imageBaseUrl","toLocaleDateString","pageStart","loadMore","loadResults","hasMore","hasMoreItems","SearchDefinition","component","select","label","value","searchTypeValue","onChange","onChangeSearchType","helperText","inputProps","onChangeSearchInput","placeHolderText","aria-label","onClickSearch","searchSortValue","onChangeSort","ItemDetailDialog","imageUrl","dialogItem","baseImageUrl","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","fullWidth","onEntered","aria-labelledby","open","openDialog","DialogTitle","DialogContent","Grid","container","src","alt","direction","DialogActions","Button","onClickDialogOk","Home","dataService","emptyConfiguration","emptySearchResults","handleChangeSearchType","target","newPlaceHolder","setState","prevState","searchDefinition","placeholderText","searchResults","handleChangeSort","handleOnChangeSearchInput","sortResults","state","sort","a","b","handleOnClickSearch","preventDefault","searchMovies","searchMovieResults","searchTvShows","searchTvShowResults","handleLoadMoreResults","stateMovieResults","slice","sortedMovieResults","concat","stateTvShowResults","sortedTvShowResults","itemResult","filter","dialogProps","loading","handleDialogOk","handleEntered","movie","tv","getKeywords","moviesGenres","tvShowGenres","undefined","getConfiguration","conf","getGenres","movieGenres","secureUrl","w92","imageUrlW185","w185","About","Main","exact","path","theme","createMuiTheme","palette","background","default","StyledHeading","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f73e7208.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-image_300.2d2ebf33.png\";","import styled from 'styled-components';\r\n\r\nexport const MenuBar = styled.ul `\r\n    list-style: none; \r\n    display: flex; \r\n    margin-top: 6px;\r\n    width: 85%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    font-size: 1.15em;\r\n    color: rgb(102, 102, 102);\r\n    width:100%;    \r\n`\r\n\r\nexport const MenuItem = styled.li `\r\n    flex: 3;\r\n    :hover {\r\n        color: rgb(0, 120, 212);\r\n    }\r\n    a {\r\n        display: block;\r\n        text-align: center;\r\n        padding: 5px 16px;\r\n        text-decoration: none;\r\n        color: rgb(102, 102, 102);        \r\n    }\r\n`","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { MenuBar, MenuItem } from '../styled/MenuComponents'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <MenuBar>\r\n                    <MenuItem><Link to='/'>Home</Link></MenuItem>\r\n                    <MenuItem><Link to='/about'>About</Link></MenuItem>\r\n                </MenuBar>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'searchMovie': '/search/movie',\r\n        'searchTvShow': '/search/tv',\r\n        'genre': '/genre',\r\n        'movie': '/movie/',\r\n        'tv': '/tv/',\r\n        'keywords': '/keywords'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query=',\r\n        'page': '&page='\r\n    }\r\n};","export function stringToEnum<T extends string>(obj: Array<T>): {[K in T]: K} {\r\n    return obj.reduce((res, key) => {\r\n      res[key] = key;\r\n      return res;\r\n    }, Object.create(null));\r\n}\r\n\r\nexport function stringToDate(stringDate: string): Date{\r\n  const stringArray: string[] = stringDate.split('-');\r\n  return new Date(+stringArray[0], +stringArray[1], +stringArray[2]) ;\r\n}","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults, Movie, TvShow, Item } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\nimport { stringToEnum, stringToDate } from \"../common/FunctionsHelper\";\r\n\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY) {\r\n            this.apiUrl = process.env.API_URL\r\n            this.apiKey = process.env.API_KEY\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText)\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    public async getGenres(type: string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${stringConstants.apiEntities.genre}${type}list`)\r\n        if (obj.genres.length > 0) {\r\n            return (obj.genres as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            })\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getKeywords(id: string, type:string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${type}${id}${stringConstants.apiEntities.keywords}`)\r\n        if (obj.keywords.length > 0) {\r\n            return (obj.keywords as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            })\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: stringToEnum(obj.images.backdrop_sizes),\r\n                logoSizes: stringToEnum(obj.images.logo_sizes),\r\n                posterSizes: stringToEnum(obj.images.poster_sizes),\r\n                profileSizes: stringToEnum(obj.images.profile_sizes),\r\n                stillSizes: stringToEnum(obj.images.still_sizes)\r\n            },\r\n            changeKeys: stringToEnum(obj.change_keys)\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n    public async searchMovies(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const movies: Movie[] = (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.title,\r\n                    overview: item.overview,\r\n                    shortDescription: item.overview \r\n                                        ? (item.overview as string).length > 60\r\n                                            ? `${(item.overview as string).substr(0, 60)}...`\r\n                                            : (item.overview as string)\r\n                                        : '',\r\n                    popularity: item.popularity,\r\n                    video: item.video,\r\n                    voteCount: item.vote_count,\r\n                    voteAverage: item.vote_average,\r\n                    releaseDate: stringToDate(item.release_date),\r\n                    originalLanguage: item.original_language,\r\n                    originalTitle: item.original_title,\r\n                    genreIds: item.genre_ids,\r\n                    backdropPath: item.backdrop_path,\r\n                    adult: item.adult,\r\n                    posterPath: item.poster_path\r\n                };\r\n            });\r\n\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: movies\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async searchTvShows(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchTvShow, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const tvShows: TvShow[] = (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.name,\r\n                    overview: item.overview,\r\n                    shortDescription: item.overview \r\n                                        ? (item.overview as string).length > 60\r\n                                            ? `${(item.overview as string).substr(0, 60)}...`\r\n                                            : (item.overview as string)\r\n                                        : '',\r\n                    popularity: item.popularity,\r\n                    voteCount: item.vote_count,\r\n                    voteAverage: item.vote_average,\r\n                    releaseDate: item.first_air_date && stringToDate(item.first_air_date),\r\n                    originalName: item.original_name,\r\n                    originCountry: item.origin_country,\r\n                    originalLanguage: item.original_language,\r\n                    genreIds: item.genre_ids,\r\n                    backdropPath: item.backdrop_path,\r\n                    posterPath: item.poster_path\r\n                };\r\n            });\r\n\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: tvShows\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }    \r\n}","import { styled as styledmui} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport styled from 'styled-components';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RateReviewTwoTone from '@material-ui/icons/RateReviewTwoTone';\r\nimport EventTwoTone from '@material-ui/icons/EventTwoTone';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport const AppContainer = styledmui(Container)({\r\n\r\n});\r\n\r\nexport const HomeContainer = styledmui(Container)({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n});\r\n\r\nexport const StyledCard = styledmui(Card)({\r\n    width: 270,\r\n    height: 330,\r\n});\r\n\r\nexport const StyledTitle = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\nexport const StyledDescription = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\n\r\n\r\nexport const StyledCardActionArea = styledmui(CardActionArea)({\r\n    minHeight: 285,\r\n});\r\n\r\nexport const StyledCardMedia = styledmui(CardMedia)({\r\n    height: 140,\r\n    backgroundSize: 92,\r\n});\r\n\r\nexport const StyledCardAction = styledmui(CardActions)({\r\n    display: 'flex',\r\n    padding: 8,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n})\r\n\r\nexport const StyledCardActionSpanDiv = styled.div({\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n});\r\n\r\nexport const StyledCardActionSpan = styled.span({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.5,\r\n    letterSpacing: '0.00938em',\r\n    paddingLeft: '0.2rem'\r\n});\r\n\r\nexport const StyledEventTwoTone = styled(EventTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const StyledRateReviewTwoTone = styled(RateReviewTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const SearchMovieResultsContainer = styledmui(Container) ({\r\n    flexGrow: 1,\r\n});\r\n\r\nexport const StyledPaper = styledmui(Paper) ({\r\n    padding: 12,\r\n    textAlign: 'center',\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n    width: '100%',\r\n    height: 400,   \r\n});\r\n\r\nexport const SearchDefinitionPaper = styledmui(Paper)({\r\n    padding: '15px 10px 5px',\r\n    marginBottom: 10,\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    backgroundColor: '#fff',\r\n});\r\n\r\nexport const SearchDefinitionIconButton = styledmui(IconButton)({\r\n    padding: 10,\r\n});\r\n\r\nexport const SearchInput = styledmui(TextField)({\r\n    root: {\r\n        '& label.Mui-focused': {\r\n          color: 'green',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n          borderBottomColor: 'green',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n          '& fieldset': {\r\n            borderColor: 'red',\r\n          },\r\n          '&:hover fieldset': {\r\n            borderColor: 'yellow',\r\n          },\r\n          '&.Mui-focused fieldset': {\r\n            borderColor: 'green',\r\n          },\r\n        },\r\n      },\r\n      marginLeft: 8,\r\n      flex: 1,      \r\n});\r\n\r\n\r\n\r\nexport const SearchResults = styledmui(InfiniteScroll)({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start',\r\n});\r\n\r\nexport const SearchResultItem = styled.div({\r\n    padding: 4,\r\n\tmargin: 0,\r\n    boxSizing: 'border-box'\r\n});\r\n\r\n","import React from 'react';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { MediaCardProps } from './ControlInterfaces';\r\nimport { StyledCard, \r\n         StyledCardActionArea, \r\n         StyledCardMedia, \r\n         StyledCardAction, \r\n         StyledEventTwoTone, \r\n         StyledRateReviewTwoTone, \r\n         StyledDescription, \r\n         StyledTitle, \r\n         StyledCardActionSpan, \r\n         StyledCardActionSpanDiv } from './styled/CommonComponents';\r\nimport defaultImage from '../../images/default-image_300.png';\r\n\r\nclass MediaCard extends React.Component<MediaCardProps> {\r\n\r\n  handleClickCard = (event: any) => {\r\n    this.props.onClickCard(event.currentTarget.id)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCard>\r\n        <StyledCardActionArea \r\n          id={this.props.id.toString()}\r\n          onClick={this.handleClickCard}\r\n        >\r\n          <StyledCardMedia\r\n            image={this.props.image ? this.props.image : defaultImage}\r\n            title={this.props.title}\r\n          />\r\n          <CardContent>\r\n            <StyledTitle gutterBottom variant=\"h5\">\r\n              {this.props.contentTitle}\r\n            </StyledTitle>\r\n            <StyledDescription variant=\"body2\" color=\"textSecondary\">\r\n              {this.props.contentDescription ? this.props.contentDescription : 'No description provided'}\r\n            </StyledDescription>\r\n          </CardContent>\r\n        </StyledCardActionArea>\r\n        <StyledCardAction>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledEventTwoTone titleAccess='Release date' />\r\n            <StyledCardActionSpan>{this.props.releaseDate ? this.props.releaseDate : 'No Release Date Provided'}</StyledCardActionSpan>            \r\n          </StyledCardActionSpanDiv>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledRateReviewTwoTone titleAccess='Vote average'/>\r\n            <StyledCardActionSpan>{this.props.voteAverage}</StyledCardActionSpan>\r\n          </StyledCardActionSpanDiv>\r\n        </StyledCardAction>\r\n      </StyledCard>\r\n    );\r\n  \r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport { SearchContentResultsProps } from './ControlInterfaces';\r\nimport { SearchMovieResultsContainer, SearchResults, SearchResultItem } from './styled/CommonComponents';\r\nimport MediaCard from './MediaCard';\r\n\r\nclass SearchContentResults extends React.Component<SearchContentResultsProps> {\r\n    handleClickCard = (id: string) => {\r\n        this.props.onClickCard(id)\r\n    }\r\n\r\n    render() {\r\n        const loader = <div key={0} className=\"loader\">Loading ...</div>;\r\n        const items = this.props.results.map(item => {\r\n            return (\r\n                <SearchResultItem key={item.id}>\r\n                    <MediaCard\r\n                            id={item.id}\r\n                            title={item.title} \r\n                            image={item.posterPath && `${this.props.imageBaseUrl}${item.posterPath}`}\r\n                            contentTitle={item.title}\r\n                            contentDescription={item.shortDescription}\r\n                            releaseDate={item.releaseDate && item.releaseDate.toLocaleDateString()}\r\n                            voteAverage={item.voteAverage}\r\n                            onClickCard={this.handleClickCard}\r\n                    />           \r\n                </SearchResultItem>                            \r\n            );\r\n        });\r\n        return(\r\n\r\n            <SearchMovieResultsContainer>\r\n                <SearchResults\r\n                    pageStart={1}\r\n                    loadMore={this.props.loadResults}\r\n                    hasMore={this.props.hasMoreItems}\r\n                    loader={loader}\r\n                >\r\n                    {this.props.results.length > 0 &&\r\n                        items\r\n                    }\r\n                </SearchResults>\r\n            </SearchMovieResultsContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchContentResults;","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { SearchDefinitionPaper, \r\n         SearchDefinitionIconButton, \r\n         SearchInput} from './styled/CommonComponents';\r\nimport { SearchDefinitionProps } from './ControlInterfaces';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst SearchDefinition =(props: SearchDefinitionProps) => {\r\n    return(\r\n        <SearchDefinitionPaper component=\"form\" >\r\n            <TextField\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Search Type\"\r\n                value={props.searchTypeValue}\r\n                onChange={props.onChangeSearchType}\r\n                helperText=\"Please select your search type\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Movies'}>Movies</MenuItem>\r\n                <MenuItem value={'TV Shows'}>TV Shows</MenuItem>\r\n            </TextField>            \r\n            <SearchInput\r\n                // placeholder={props.placeHolderText}\r\n                inputProps={{ 'aria-label': 'search movies' }}\r\n                onChange={props.onChangeSearchInput}\r\n                value={props.searchTerm}\r\n                label={props.placeHolderText}\r\n                variant=\"outlined\"\r\n            />\r\n            <SearchDefinitionIconButton \r\n                type=\"submit\"  \r\n                aria-label=\"search\"\r\n                onClick={props.onClickSearch}\r\n            >\r\n                <SearchIcon />\r\n            </SearchDefinitionIconButton>\r\n            <TextField\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Sort by\"\r\n                value={props.searchSortValue}\r\n                onChange={props.onChangeSort}\r\n                helperText=\"Please select the field to sort results\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Title'}>Title</MenuItem>\r\n                <MenuItem value={'Release date'}>Release date</MenuItem>\r\n                <MenuItem value={'Vote average'}>Vote average (DESC)</MenuItem>\r\n            </TextField>              \r\n        </SearchDefinitionPaper>\r\n    );\r\n}\r\n\r\nexport default SearchDefinition;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ItemDetailDialogProps } from './ControlInterfaces';\r\nimport defaultImage from '../../images/default-image_300.png';\r\n\r\nconst ItemDetailDialog = (props: ItemDetailDialogProps) => {\r\n    const imageUrl = props.dialogItem && props.dialogItem.posterPath \r\n                        ? `${props.baseImageUrl}${props.dialogItem?.posterPath}`\r\n                        : defaultImage;\r\n    return (\r\n        <Dialog\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        maxWidth=\"md\"\r\n        fullWidth={false}\r\n        onEntered={props.onEntered}\r\n        aria-labelledby=\"confirmation-dialog-title\"\r\n        open={props.openDialog}\r\n    >\r\n    <DialogTitle id=\"confirmation-dialog-title\">{props.dialogItem && props.dialogItem.title}</DialogTitle>\r\n    <DialogContent>\r\n        <Grid container>\r\n            <Grid item>\r\n                <img src={imageUrl} alt={props.dialogItem && props.dialogItem.title} />\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid container direction='column' >\r\n                    <Grid item>\r\n                        <Typography component='h3'>\r\n                            Overview\r\n                        </Typography>\r\n                        <Typography component='h4'>\r\n                            {props.dialogItem && props.dialogItem.overview}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography component='h3'>\r\n                            Popularity\r\n                        </Typography>\r\n                        <Typography component='h4'>\r\n                            {props.dialogItem && props.dialogItem.popularity}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </DialogContent>\r\n    <DialogActions>\r\n        <Button onClick={props.onClickDialogOk} color=\"primary\">\r\n        Ok\r\n        </Button>\r\n    </DialogActions>\r\n    </Dialog>  \r\n    );\r\n}\r\n\r\nexport default ItemDetailDialog;","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../service/DataService';\r\nimport { Configuration, SearchResults, TvShow, Movie, Result, Item } from '../../model';\r\nimport SearchContentResults from '../common/SearchContentResults';\r\nimport SearchDefinition from '../common/SearchDefinition';\r\nimport { HomeContainer, StyledPaper } from '../common/styled/CommonComponents';\r\nimport ItemDetailDialog from '../common/ItemDetailDialog';\r\nimport { stringConstants } from '../../common/StringConstants';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n    emptyConfiguration: Configuration = {\r\n            images: {\r\n                baseUrl: '',\r\n                secureBaseUrl: '',\r\n                backdropSizes: [],\r\n                logoSizes: [],\r\n                posterSizes: [],\r\n                profileSizes: [],\r\n                stillSizes: []\r\n            },\r\n            changeKeys: []\r\n    \r\n    };\r\n    emptySearchResults: SearchResults = {\r\n        page: 0,\r\n        totalPages: 0,\r\n        totalResults: 0,\r\n        results: []\r\n    };\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: this.emptyConfiguration,\r\n            moviesGenres: [],\r\n            tvShowGenres: [],\r\n            searchResults: this.emptySearchResults,\r\n            searchDefinition: {\r\n                searchTerm: '',\r\n                searchTypeValue: 'Movies',\r\n                placeholderText: 'Search Movies in The Movie Database API'\r\n            },\r\n            searchSortValue:'Title',\r\n            dialogProps: {\r\n                loading: false,\r\n                openDialog: false,\r\n                dialogItem: undefined,\r\n                keywords: []\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const movieGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.movie);\r\n        const tvShowGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.tv);\r\n        // const testKeyword: Item[] = await this.dataService.getKeywords('240', stringConstants.apiEntities.movie)\r\n        this.setState({ \r\n            configuration: conf, \r\n            moviesGenres: movieGenres, \r\n            tvShowGenres: tvShowGenres \r\n        });\r\n    }\r\n\r\n    handleChangeSearchType = (event: any) => {\r\n        const { value } = event.target;\r\n        const newPlaceHolder = `Search ${value} in The Movie Database API` ;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            searchTerm: '',\r\n                            searchTypeValue: value, \r\n                            placeholderText:newPlaceHolder\r\n                        },\r\n                        searchResults: {\r\n                            page: 0,\r\n                            totalPages: 0,\r\n                            totalResults: 0,\r\n                            results: []\r\n                        }\r\n                    }));\r\n    }\r\n\r\n    handleChangeSort = (event: any) => {\r\n        const { value } = event.target;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                    searchSortValue: value,\r\n                    }));\r\n    }    \r\n\r\n    handleOnChangeSearchInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { value } = event.currentTarget as HTMLInputElement;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            ...prevState.searchDefinition,\r\n                            searchTerm: value\r\n                        } \r\n                    }));        \r\n    }\r\n\r\n    sortResults = (results: Result[]) => {\r\n        switch(this.state.searchSortValue) {\r\n            case 'Title':\r\n                results.sort((a, b) => {\r\n                    if (a.title < b.title)\r\n                        return -1;\r\n                    if (a.title > b.title)\r\n                        return 1;\r\n                    return 0;\r\n                });\r\n                break;\r\n            case 'Release date': \r\n                results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                break;\r\n            case 'Vote average':\r\n                results.sort((a, b) => b.voteAverage - a.voteAverage);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleOnClickSearch = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, 1);\r\n                // searchMovieResults.results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                this.sortResults(searchMovieResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchMovieResults }));\r\n                break;\r\n            case 'TV Shows':\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, 1);\r\n                this.sortResults(searchTvShowResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchTvShowResults }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleLoadMoreResults = async () => {\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const stateMovieResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                const sortedMovieResults = stateMovieResults.concat(searchMovieResults.results);\r\n                this.sortResults(sortedMovieResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchMovieResults.page,\r\n                                totalPages: searchMovieResults.totalPages,\r\n                                totalResults: searchMovieResults.totalResults,\r\n                                results: sortedMovieResults\r\n                            } \r\n                }));\r\n                break;\r\n            case 'TV Shows':\r\n                const stateTvShowResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                    const sortedTvShowResults = stateTvShowResults.concat(searchTvShowResults.results);\r\n                    this.sortResults(sortedTvShowResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchTvShowResults.page,\r\n                                totalPages: searchTvShowResults.totalPages,\r\n                                totalResults: searchTvShowResults.totalResults,\r\n                                results: sortedTvShowResults\r\n                            } \r\n                }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    handleClickCard = (id: string) => {\r\n        //alert('Click on card with id: ' + id);\r\n        const itemResult: Result = \r\n            this.state.searchResults.results.filter(item => item.id === +id)[0];\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                loading: true,\r\n                openDialog: true,\r\n                dialogItem: itemResult\r\n            }\r\n        }));\r\n    }\r\n\r\n    handleDialogOk = (event: any) => {\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps, \r\n                openDialog: false\r\n            }\r\n        }));        \r\n    }\r\n\r\n    handleEntered = async (event: any) => {\r\n        const type: string = this.state.searchDefinition.searchTypeValue === 'Movies'\r\n                                ? stringConstants.apiEntities.movie\r\n                                : stringConstants.apiEntities.tv;\r\n        if (this.state.dialogProps.dialogItem) {\r\n            const keywords: Item[] = \r\n                await this.dataService.getKeywords(this.state.dialogProps.dialogItem.id.toString(), type);\r\n            this.setState(prevState => ({ ...prevState, \r\n                dialogProps: {\r\n                    ...prevState.dialogProps, \r\n                    keywords: keywords\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const secureUrl: string = this.state.configuration.images.secureBaseUrl !== ''\r\n                                ? this.state.configuration.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w92}/` : '';\r\n        const imageUrlW185: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w185}/` : '';\r\n        return (\r\n            <HomeContainer>\r\n                <SearchDefinition searchTerm={this.state.searchDefinition.searchTerm} \r\n                                  searchTypeValue={this.state.searchDefinition.searchTypeValue} \r\n                                  placeHolderText={this.state.searchDefinition.placeholderText}\r\n                                  onChangeSearchInput={this.handleOnChangeSearchInput}\r\n                                  onChangeSearchType={this.handleChangeSearchType}\r\n                                  onClickSearch={this.handleOnClickSearch}\r\n                                  onChangeSort={this.handleChangeSort}\r\n                                  searchSortValue={this.state.searchSortValue}\r\n                />\r\n                {this.state.searchResults.totalResults === 0 &&\r\n                    <StyledPaper>No results</StyledPaper>\r\n                }                \r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchContentResults \r\n                        imageBaseUrl={imageUrl}\r\n                        hasMoreItems={this.state.searchResults.page < this.state.searchResults.totalPages}\r\n                        results={this.state.searchDefinition.searchTypeValue === '1'\r\n                                    ? (this.state.searchResults.results as Movie[])\r\n                                    : (this.state.searchResults.results as TvShow[])} \r\n                        loadResults={this.handleLoadMoreResults}\r\n                        onClickCard={this.handleClickCard}\r\n                        />\r\n                }\r\n\r\n                <ItemDetailDialog \r\n                    baseImageUrl={imageUrlW185}\r\n                    openDialog={this.state.dialogProps.openDialog}\r\n                    dialogItem={this.state.dialogProps.dialogItem && this.state.dialogProps.dialogItem}\r\n                    keywords={this.state.dialogProps.keywords}\r\n                    onEntered={this.handleEntered}\r\n                    onClickDialogOk={this.handleDialogOk}\r\n                />\r\n                {/* \r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"md\"\r\n                    fullWidth={false}\r\n                    onEntered={this.handleEntering}\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={this.state.openDialog}\r\n                >                \r\n                <DialogTitle id=\"confirmation-dialog-title\">Phone Ringtone</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <img src='https://image.tmdb.org/t/p//w185//bVq65huQ8vHDd1a4Z37QtuyEvpA.jpg'  />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container direction='column' >\r\n                                <Grid item>\r\n                                    <Typography component='h3'>\r\n                                        Complete Overview\r\n                                    </Typography>\r\n                                    <Typography component='h4'>\r\n                                        Overview content\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography component='h3'>\r\n                                        Popularity\r\n                                    </Typography>\r\n                                    <Typography component='h4'>\r\n                                        19.982\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.handleDialogOk} color=\"primary\">\r\n                    Ok\r\n                    </Button>\r\n                </DialogActions>\r\n                </Dialog>                 */}\r\n            </HomeContainer>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <p>About page</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\n\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/about' component={About}/>\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport Header from './components/header/Header';\r\nimport Main from './components/Main';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { AppContainer } from './components/common/styled/CommonComponents';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { styled as styledmui, MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    background: {\r\n      default: \"white\"\r\n    }\r\n  }\r\n});\r\n\r\nconst StyledHeading = styledmui(Typography)({\r\n  textAlign: 'center',\r\n  maxWidth: '100%',\r\n  fontSize: '3rem',\r\n  color: 'steelblue'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n      </MuiThemeProvider>\r\n      <AppContainer maxWidth=\"lg\">\r\n        <StyledHeading variant=\"h2\" gutterBottom>Movie Database Search</StyledHeading>\r\n        <Header />\r\n        <Main />\r\n      </AppContainer>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}