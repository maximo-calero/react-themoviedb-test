{"version":3,"sources":["images/default-image_300.png","components/header/styled/MenuComponents.ts","components/header/Header.tsx","common/StringConstants.ts","common/FunctionsHelper.ts","service/DataService.ts","components/controls/styled/CommonComponents.ts","components/controls/MediaCard.tsx","components/controls/SearchContentResults.tsx","components/controls/SearchDefinition.tsx","components/controls/ItemDetailDialog.tsx","common/EmptyObjects.ts","components/pages/home/Home.tsx","components/pages/about/About.tsx","components/pages/mySelection/MyRatings.tsx","components/main/Layout.tsx","components/main/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuBar","styled","ul","MenuItem","li","useMenuStyles","makeStyles","theme","createStyles","selectedMenuItem","fontWeight","Header","styles","activeClassName","to","exact","stringConstants","stringToEnum","obj","reduce","res","key","Object","create","stringToDate","stringDate","stringArray","split","Date","DataService","apiUrl","apiKey","sessionId","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","type","getApiJson","genre","genres","length","map","item","id","name","keywords","results","configuration","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","serviceArray","title","overview","shortDescription","substr","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","first_air_date","originalName","original_name","originCountry","origin_country","searchTerm","page","query","toString","searchMovie","total_results","movies","getMoviesFromServiceArray","totalResults","totalPages","total_pages","searchTvShow","tvShows","getTvShowsFromServiceArray","urlPart","movie","accountStates","params","favorite","ratedValue","rated","value","watchList","watchlist","undefined","account","ratedMovies","sortBy","rateValue","objValue","postUrl","rating","method","headers","body","JSON","stringify","AppContainer","styledmui","Container","HomeContainer","display","flexDirection","alignItems","StyledCard","Card","width","height","StyledTitle","Typography","fontSize","fontFamily","lineHeight","letterSpacing","StyledDescription","StyledCardActionArea","CardActionArea","minHeight","StyledCardMedia","CardMedia","backgroundSize","StyledCardAction","CardActions","padding","justifyContent","StyledCardActionSpanDiv","div","StyledCardActionSpan","span","paddingLeft","StyledEventTwoTone","EventTwoTone","fill","transition","flexShrink","userSelect","StyledRateReviewTwoTone","RateReviewTwoTone","SearchMovieResultsContainer","flexGrow","StyledPaper","Paper","textAlign","color","SearchResults","InfiniteScroll","flexWrap","SearchResultItem","margin","boxSizing","MediaCard","handleClickCard","event","props","onClickCard","currentTarget","onClick","image","defaultImage","CardContent","gutterBottom","variant","contentTitle","contentDescription","titleAccess","React","Component","SearchContentResults","loader","className","items","imageBaseUrl","toLocaleDateString","pageStart","loadMore","loadResults","hasMore","hasMoreItems","useSearchDefinitionStyles","searchText","borderBottomColor","borderColor","marginLeft","marginBottom","searchPaper","backgroundColor","dropDown","searchIconButton","searchContainer","SearchDefinition","component","TextField","select","label","searchTypeValue","onChange","onChangeSearchType","helperText","Grid","container","direction","justify","inputProps","onChangeSearchInput","placeHolderText","IconButton","aria-label","onClickSearch","searchSortValue","onChangeSort","useItemDialogStyles","firstColumn","marginRight","secondColumn","thirdColumn","chip","genreChip","keyWordChip","backdrop","zIndex","drawer","dialogActions","ratingMessage","fieldSet","ItemDetailDialog","imageUrl","dialogItem","baseImageUrl","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","fullWidth","onEntered","aria-labelledby","open","openDialog","DialogTitle","DialogContent","Backdrop","showBackdrop","CircularProgress","src","alt","Box","mb","Rating","max","precision","ratingValue","onChangeRating","Chip","DialogActions","Button","onClickDialogOk","emptyConfiguration","emptySearchResults","emptySearchDefinition","placeholderText","emptyDialogProps","loading","Home","dataService","handleChangeSearchType","target","newPlaceHolder","setState","prevState","searchDefinition","searchResults","handleChangeSort","handleOnChangeSearchInput","sortResults","state","sort","a","b","handleOnClickSearch","preventDefault","searchMovies","searchMovieResults","searchTvShows","searchTvShowResults","handleLoadMoreResults","stateMovieResults","slice","sortedMovieResults","concat","stateTvShowResults","sortedTvShowResults","itemResult","filter","genreId","moviesGenres","tvShowGenres","dialogProps","handleDialogOk","handleEntered","tv","getKeywords","ratedMovie","getRatedMovie","handleRating","newValue","rateMovie","message","status_code","imageUrlW185","getConfiguration","conf","getGenres","movieGenres","secureUrl","w92","w185","About","href","MyRatings","getAccountRatedMovies","Layout","path","createMuiTheme","palette","background","default","StyledHeading","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e8e5ce4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-image_300.2d2ebf33.png\";","import styled from 'styled-components';\r\n\r\nexport const MenuBar = styled.ul `\r\n    list-style: none; \r\n    display: flex; \r\n    margin-top: 6px;\r\n    width: 85%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    font-size: 1.55rem;\r\n    color: rgb(102, 102, 102);\r\n    width:100%;    \r\n`\r\n\r\nexport const MenuItem = styled.li `\r\n    flex: 3;\r\n    :hover {\r\n        color: rgb(0, 120, 212);\r\n    }\r\n    a {\r\n        display: block;\r\n        text-align: center;\r\n        padding: 5px 16px;\r\n        text-decoration: none;\r\n        color: rgb(102, 102, 102);        \r\n    }\r\n`","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { MenuBar, MenuItem } from './styled/MenuComponents'\r\nimport { createStyles, \r\n    makeStyles, \r\n    Theme } from '@material-ui/core/styles';\r\n  \r\n  export const useMenuStyles = makeStyles((theme: Theme) => \r\n      createStyles({\r\n          selectedMenuItem: {\r\n              fontWeight: 'bold',\r\n          },\r\n      })\r\n  );\r\n\r\nconst Header = () => {\r\n    const styles = useMenuStyles();\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <MenuBar>\r\n                    <MenuItem><NavLink activeClassName={styles.selectedMenuItem} to='/' exact>Home</NavLink></MenuItem>\r\n                    <MenuItem><NavLink activeClassName={styles.selectedMenuItem} to='/my-rated-movies'>My Rated Movies</NavLink></MenuItem>\r\n                    <MenuItem><NavLink activeClassName={styles.selectedMenuItem} to='/about'>About</NavLink></MenuItem>\r\n                </MenuBar>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'account': '/account/%7Baccount_id%7D',\r\n        'genre': '/genre',\r\n        'movie': '/movie/',\r\n        'tv': '/tv/',\r\n        'keywords': '/keywords'\r\n    },\r\n    'verbs': {\r\n        'searchMovie': '/search/movie',\r\n        'searchTvShow': '/search/tv',\r\n        'rating': '/rating',\r\n        'ratedMovies': '/rated/movies',\r\n        'accountStates': '/account_states'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query=',\r\n        'page': '&page=',\r\n        'sessionId': '&session_id=',\r\n        'sortBy': '&sort_by='\r\n    },\r\n};","export function stringToEnum<T extends string>(obj: Array<T>): {[K in T]: K} {\r\n    return obj.reduce((res, key) => {\r\n      res[key] = key;\r\n      return res;\r\n    }, Object.create(null));\r\n}\r\n\r\nexport function stringToDate(stringDate: string): Date{\r\n  const stringArray: string[] = stringDate.split('-');\r\n  return new Date(+stringArray[0], +stringArray[1], +stringArray[2]) ;\r\n}","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults, Movie, TvShow, Item, Result, RatedMovie } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\nimport { stringToEnum, stringToDate } from \"../common/FunctionsHelper\";\r\n\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n    private sessionId: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY && process.env.SESSION_ID) {\r\n            this.apiUrl = process.env.API_URL;\r\n            this.apiKey = process.env.API_KEY;\r\n            this.sessionId = process.env.SESSION_ID;\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    public async getGenres(type: string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${stringConstants.apiEntities.genre}${type}list`)\r\n        if (obj.genres.length > 0) {\r\n            return (obj.genres as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            })\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getKeywords(id: string, type:string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${type}${id}${stringConstants.apiEntities.keywords}`);\r\n        \r\n        if (obj.keywords && obj.keywords.length > 0) {\r\n            return (obj.keywords as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            });\r\n        }else if (obj.results && obj.results.length){\r\n            return (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            });\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: stringToEnum(obj.images.backdrop_sizes),\r\n                logoSizes: stringToEnum(obj.images.logo_sizes),\r\n                posterSizes: stringToEnum(obj.images.poster_sizes),\r\n                profileSizes: stringToEnum(obj.images.profile_sizes),\r\n                stillSizes: stringToEnum(obj.images.still_sizes)\r\n            },\r\n            changeKeys: stringToEnum(obj.change_keys)\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n\r\n    private getMoviesFromServiceArray(serviceArray: any[]): Movie[]{\r\n        return serviceArray.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.title,\r\n                overview: item.overview,\r\n                shortDescription: item.overview \r\n                                    ? (item.overview as string).length > 60\r\n                                        ? `${(item.overview as string).substr(0, 60)}...`\r\n                                        : (item.overview as string)\r\n                                    : '',\r\n                popularity: item.popularity,\r\n                video: item.video,\r\n                voteCount: item.vote_count,\r\n                voteAverage: item.vote_average,\r\n                releaseDate: item.release_date && stringToDate(item.release_date),\r\n                originalLanguage: item.original_language,\r\n                originalTitle: item.original_title,\r\n                genreIds: item.genre_ids,\r\n                backdropPath: item.backdrop_path,\r\n                adult: item.adult,\r\n                posterPath: item.poster_path,\r\n            };\r\n        });\r\n    }\r\n\r\n    private getTvShowsFromServiceArray(serviceArray: any[]): TvShow[]{\r\n        return serviceArray.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.name,\r\n                overview: item.overview,\r\n                shortDescription: item.overview \r\n                                    ? (item.overview as string).length > 60\r\n                                        ? `${(item.overview as string).substr(0, 60)}...`\r\n                                        : (item.overview as string)\r\n                                    : '',\r\n                popularity: item.popularity,\r\n                voteCount: item.vote_count,\r\n                voteAverage: item.vote_average,\r\n                releaseDate: item.first_air_date && stringToDate(item.first_air_date),\r\n                originalName: item.original_name,\r\n                originCountry: item.origin_country,\r\n                originalLanguage: item.original_language,\r\n                genreIds: item.genre_ids,\r\n                backdropPath: item.backdrop_path,\r\n                posterPath: item.poster_path,\r\n            };\r\n        });\r\n    }    \r\n\r\n    public async searchMovies(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.verbs.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const movies: Movie[] = this.getMoviesFromServiceArray(obj.results as any[]);\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: movies\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async searchTvShows(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.verbs.searchTvShow, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const tvShows: TvShow[] = this.getTvShowsFromServiceArray(obj.results as any[]);\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: tvShows\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async getRatedMovie(id: string): Promise<RatedMovie | undefined> {\r\n        const urlPart: string = `${stringConstants.apiEntities.movie}${id}${stringConstants.verbs.accountStates}`;\r\n        const params: string = `${stringConstants.params.sessionId}${this.sessionId}`;\r\n        const obj = await this.getApiJson(urlPart, params);\r\n        if(obj) {\r\n            return {\r\n                id: obj.id,\r\n                favorite: obj.favorite,\r\n                ratedValue: obj.rated.value,\r\n                watchList: obj.watchlist\r\n            }\r\n        }else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public async getAccountRatedMovies(page: number): Promise<SearchResults> {\r\n        const urlPart: string = `${stringConstants.apiEntities.account}${stringConstants.verbs.ratedMovies}`;\r\n        const params: string = `${stringConstants.params.sessionId}${this.sessionId}${stringConstants.params.sortBy}created_at.asc${stringConstants.params.page}${page.toString()}`;\r\n        const obj = await this.getApiJson(urlPart, params);\r\n        if (obj.total_results > 0) {\r\n            const movies: Movie[] = this.getMoviesFromServiceArray(obj.results as any[]);\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: movies\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async rateMovie(id: string, rateValue: number): Promise<any> {\r\n        const objValue = {\r\n            value: rateValue\r\n        };\r\n        const postUrl: string = \r\n            `${this.apiUrl}${stringConstants.apiEntities.movie}${id}${stringConstants.verbs.rating}${stringConstants.params.apiKey}${this.apiKey}${stringConstants.params.sessionId}${this.sessionId}`;\r\n    \r\n        const response: Response = await fetch(postUrl, {\r\n            method: 'POST',\r\n            headers: { 'content-type': 'application/json;charset=utf-8' },\r\n            body: JSON.stringify(objValue)\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n}","import { styled as styledmui} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport styled from 'styled-components';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RateReviewTwoTone from '@material-ui/icons/RateReviewTwoTone';\r\nimport EventTwoTone from '@material-ui/icons/EventTwoTone';\r\n\r\nexport const AppContainer = styledmui(Container)({\r\n\r\n});\r\n\r\nexport const HomeContainer = styledmui(Container)({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n});\r\n\r\nexport const StyledCard = styledmui(Card)({\r\n    width: 270,\r\n    height: 330,\r\n});\r\n\r\nexport const StyledTitle = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\nexport const StyledDescription = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\n\r\n\r\nexport const StyledCardActionArea = styledmui(CardActionArea)({\r\n    minHeight: 285,\r\n});\r\n\r\nexport const StyledCardMedia = styledmui(CardMedia)({\r\n    height: 140,\r\n    backgroundSize: 92,\r\n});\r\n\r\nexport const StyledCardAction = styledmui(CardActions)({\r\n    display: 'flex',\r\n    padding: 8,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n})\r\n\r\nexport const StyledCardActionSpanDiv = styled.div({\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n});\r\n\r\nexport const StyledCardActionSpan = styled.span({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.5,\r\n    letterSpacing: '0.00938em',\r\n    paddingLeft: '0.2rem'\r\n});\r\n\r\nexport const StyledEventTwoTone = styled(EventTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const StyledRateReviewTwoTone = styled(RateReviewTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const SearchMovieResultsContainer = styledmui(Container) ({\r\n    flexGrow: 1,\r\n});\r\n\r\nexport const StyledPaper = styledmui(Paper) ({\r\n    padding: 12,\r\n    textAlign: 'center',\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n    width: '100%',\r\n    height: 400,   \r\n});\r\n\r\nexport const SearchResults = styledmui(InfiniteScroll)({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start',\r\n});\r\n\r\nexport const SearchResultItem = styled.div({\r\n    padding: 4,\r\n\tmargin: 0,\r\n    boxSizing: 'border-box'\r\n});\r\n\r\n","import React from 'react';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { MediaCardProps } from './ControlInterfaces';\r\nimport { StyledCard, \r\n         StyledCardActionArea, \r\n         StyledCardMedia, \r\n         StyledCardAction, \r\n         StyledEventTwoTone, \r\n         StyledRateReviewTwoTone, \r\n         StyledDescription, \r\n         StyledTitle, \r\n         StyledCardActionSpan, \r\n         StyledCardActionSpanDiv } from './styled/CommonComponents';\r\nimport defaultImage from '../../images/default-image_300.png';\r\n\r\nclass MediaCard extends React.Component<MediaCardProps> {\r\n\r\n  handleClickCard = (event: any) => {\r\n    this.props.onClickCard(event.currentTarget.id)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCard>\r\n        <StyledCardActionArea \r\n          id={this.props.id.toString()}\r\n          onClick={this.handleClickCard}\r\n        >\r\n          <StyledCardMedia\r\n            image={this.props.image ? this.props.image : defaultImage}\r\n            title={this.props.title}\r\n          />\r\n          <CardContent>\r\n            <StyledTitle gutterBottom variant=\"h5\">\r\n              {this.props.contentTitle}\r\n            </StyledTitle>\r\n            <StyledDescription variant=\"body2\" color=\"textSecondary\">\r\n              {this.props.contentDescription ? this.props.contentDescription : 'No description provided'}\r\n            </StyledDescription>\r\n          </CardContent>\r\n        </StyledCardActionArea>\r\n        <StyledCardAction>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledEventTwoTone titleAccess='Release date' />\r\n            <StyledCardActionSpan>{this.props.releaseDate ? this.props.releaseDate : 'No Release Date Provided'}</StyledCardActionSpan>            \r\n          </StyledCardActionSpanDiv>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledRateReviewTwoTone titleAccess='Vote average'/>\r\n            <StyledCardActionSpan>{this.props.voteAverage}</StyledCardActionSpan>\r\n          </StyledCardActionSpanDiv>\r\n        </StyledCardAction>\r\n      </StyledCard>\r\n    );\r\n  \r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport { SearchContentResultsProps } from './ControlInterfaces';\r\nimport { SearchMovieResultsContainer, SearchResults, SearchResultItem } from './styled/CommonComponents';\r\nimport MediaCard from './MediaCard';\r\n\r\nclass SearchContentResults extends React.Component<SearchContentResultsProps> {\r\n    handleClickCard = (id: string) => {\r\n        this.props.onClickCard(id)\r\n    }\r\n\r\n    render() {\r\n        const loader = <div key={0} className=\"loader\">Loading ...</div>;\r\n        const items = this.props.results.map(item => {\r\n            return (\r\n                <SearchResultItem key={item.id}>\r\n                    <MediaCard\r\n                            id={item.id}\r\n                            title={item.title} \r\n                            image={item.posterPath && `${this.props.imageBaseUrl}${item.posterPath}`}\r\n                            contentTitle={item.title}\r\n                            contentDescription={item.shortDescription}\r\n                            releaseDate={item.releaseDate && item.releaseDate.toLocaleDateString()}\r\n                            voteAverage={item.voteAverage}\r\n                            onClickCard={this.handleClickCard}\r\n                    />           \r\n                </SearchResultItem>                            \r\n            );\r\n        });\r\n        return(\r\n\r\n            <SearchMovieResultsContainer>\r\n                <SearchResults\r\n                    pageStart={1}\r\n                    loadMore={this.props.loadResults}\r\n                    hasMore={this.props.hasMoreItems}\r\n                    loader={loader}\r\n                >\r\n                    {this.props.results.length > 0 &&\r\n                        items\r\n                    }\r\n                </SearchResults>\r\n            </SearchMovieResultsContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchContentResults;","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { SearchDefinitionProps } from './ControlInterfaces';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createStyles, \r\n    makeStyles, \r\n    Theme } from '@material-ui/core/styles';\r\n\r\nexport const useSearchDefinitionStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        searchText: {\r\n            '& label.Mui-focused': {\r\n            color: 'green',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'green',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'rgba(0, 0, 0, 0.23)',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'blue',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'green',\r\n            },\r\n            },\r\n            marginLeft: 8,\r\n            marginBottom: 15,\r\n            width: '15rem'\r\n        },\r\n        searchPaper: {\r\n            padding: '15px 10px 5px',\r\n            marginBottom: 10,\r\n            display: 'flex',\r\n            alignItems: 'flex-start',\r\n            width: '100%',\r\n            backgroundColor: '#fff',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n        },\r\n        dropDown: {\r\n            marginBottom: 15,\r\n            width: '15rem'\r\n        },\r\n        searchIconButton: {\r\n            padding: 10,\r\n            width: '4rem',\r\n            height: '4rem',\r\n        },\r\n        searchContainer: {\r\n            width: '20rem'\r\n        }\r\n    })\r\n);\r\n\r\nconst SearchDefinition =(props: SearchDefinitionProps) => {\r\n    const styles = useSearchDefinitionStyles();\r\n    return(\r\n        <Paper component=\"form\" className={styles.searchPaper} >\r\n            <TextField\r\n                className={styles.dropDown}\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Search Type\"\r\n                value={props.searchTypeValue}\r\n                onChange={props.onChangeSearchType}\r\n                helperText=\"Please select your search type\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Movies'}>Movies</MenuItem>\r\n                <MenuItem value={'TV Shows'}>TV Shows</MenuItem>\r\n            </TextField>\r\n            <Grid className={styles.searchContainer} \r\n                  container \r\n                  direction='row' \r\n                  justify='center' \r\n                  alignItems='flex-start'\r\n            >\r\n                <TextField\r\n                    className={styles.searchText}\r\n                    inputProps={{ 'aria-label': 'search movies' }}\r\n                    onChange={props.onChangeSearchInput}\r\n                    value={props.searchTerm}\r\n                    label={props.placeHolderText}\r\n                    variant=\"outlined\"\r\n                />\r\n                <IconButton \r\n                    className={styles.searchIconButton}\r\n                    type=\"submit\"  \r\n                    aria-label=\"search\"\r\n                    onClick={props.onClickSearch}\r\n                >\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <TextField\r\n                className={styles.dropDown}\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Sort by\"\r\n                value={props.searchSortValue}\r\n                onChange={props.onChangeSort}\r\n                helperText=\"Please select the field to sort results\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Title'}>Title</MenuItem>\r\n                <MenuItem value={'Release date'}>Release date</MenuItem>\r\n                <MenuItem value={'Vote average'}>Vote average (DESC)</MenuItem>\r\n            </TextField>              \r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default SearchDefinition;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ItemDetailDialogProps } from './ControlInterfaces';\r\nimport defaultImage from '../../images/default-image_300.png';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport { useTheme, createStyles, \r\n    makeStyles, \r\n    Theme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\r\n\r\n\r\nconst useItemDialogStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        firstColumn: {\r\n            marginRight: '0.900rem',\r\n            width: '16rem',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            flexWrap: 'wrap',       \r\n        },\r\n        secondColumn: {\r\n            width: '19rem',\r\n            marginRight: '0.700rem'\r\n        },\r\n        thirdColumn: {\r\n            width: '19rem',\r\n        },\r\n        chip: {\r\n            margin: '0.200rem',\r\n        },\r\n        genreChip:{\r\n            backgroundColor: 'powderblue'\r\n        },\r\n        keyWordChip: {\r\n            backgroundColor: 'royalblue',\r\n            color: 'white'\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n        dialogActions: {\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between'\r\n        },\r\n        ratingMessage: {\r\n            color: 'blue'\r\n        },\r\n        fieldSet: {\r\n            padding: 0,\r\n            margin: 0\r\n        }\r\n    })\r\n);\r\n\r\n\r\nconst ItemDetailDialog = (props: ItemDetailDialogProps) => {\r\n    const imageUrl = props.dialogItem && props.dialogItem.posterPath \r\n                        ? `${props.baseImageUrl}${props.dialogItem?.posterPath}`\r\n                        : defaultImage;\r\n    const styles = useItemDialogStyles();\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    return (\r\n        <Dialog\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n            maxWidth=\"md\"\r\n            fullWidth={fullScreen}\r\n            onEntered={props.onEntered}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={props.openDialog}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\">{props.dialogItem && props.dialogItem.title}</DialogTitle>\r\n            <DialogContent>\r\n                <Backdrop className={styles.backdrop} open={props.showBackdrop}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n                <Grid container direction='row'>\r\n                    <Grid item className={styles.firstColumn}>\r\n                        <img src={imageUrl} alt={props.dialogItem && props.dialogItem.title} />\r\n                        <Grid container direction='column'>\r\n                            <Grid item>\r\n                                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\" className={styles.fieldSet}>\r\n                                    <Typography component=\"legend\">Vote average</Typography>\r\n                                    <Rating\r\n                                        name=\"vote-average\"\r\n                                        value={props.dialogItem && props.dialogItem.voteAverage}\r\n                                        max={10}\r\n                                        precision={0.25}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            {props.type === 'Movies' &&\r\n                                <Grid item>\r\n                                    <Box component=\"fieldset\" mb={3} borderColor=\"transparent\" className={styles.fieldSet}>\r\n                                        <Typography component=\"legend\">Your rating</Typography>\r\n                                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\" className={styles.fieldSet}>\r\n                                            <Rating\r\n                                                name=\"your-rating\"\r\n                                                value={props.ratingValue}\r\n                                                max={10}\r\n                                                precision={0.25}\r\n                                                onChange={props.onChangeRating}\r\n                                                className={styles.fieldSet}\r\n                                            />\r\n                                            <Typography className={styles.ratingMessage} component=\"span\">{props.ratingMessage && props.ratingMessage}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Grid>\r\n                            }\r\n                        </Grid>                        \r\n                    </Grid>\r\n                    <Grid container direction='column' className={styles.secondColumn} >\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Overview\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" gutterBottom>\r\n                                {props.dialogItem && props.dialogItem.overview}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Popularity\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" gutterBottom>\r\n                                {props.dialogItem && props.dialogItem.popularity}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container direction='column' className={styles.thirdColumn}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Genres\r\n                            </Typography>\r\n                            <div>\r\n                                {props.genres.length > 0 &&\r\n                                    props.genres.map(item => {\r\n                                        return(\r\n                                            <Chip className={`${styles.chip} ${styles.genreChip}`} key={item} label={item} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {props.genres.length === 0 &&\r\n                                    <Typography>No genres provided</Typography>\r\n                                }                                    \r\n                            </div>                    \r\n                        </Grid>                            \r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Keywords\r\n                            </Typography>\r\n                            <div>\r\n                                {props.keywords.length > 0 &&\r\n                                    props.keywords.map(item => {\r\n                                        return(\r\n                                            <Chip className={`${styles.chip} ${styles.keyWordChip}`} key={item.id} label={item.name} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {props.keywords.length === 0 &&\r\n                                    <Typography>No keywords provided</Typography>\r\n                                }\r\n                            </div>                    \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions className={styles.dialogActions}>\r\n                <Button onClick={props.onClickDialogOk} color=\"primary\">\r\n                Ok\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>  \r\n    );\r\n}\r\n\r\nexport default ItemDetailDialog;","import { Configuration, SearchResults } from \"../model\";\r\nimport { SearchDefinitionValues, DialogProperties } from \"./CommonInterfaces\";\r\n\r\nexport const emptyConfiguration: Configuration = {\r\n    images: {\r\n        baseUrl: '',\r\n        secureBaseUrl: '',\r\n        backdropSizes: [],\r\n        logoSizes: [],\r\n        posterSizes: [],\r\n        profileSizes: [],\r\n        stillSizes: []\r\n    },\r\n    changeKeys: []\r\n\r\n};\r\n\r\nexport const emptySearchResults: SearchResults = {\r\n    page: 0,\r\n    totalPages: 0,\r\n    totalResults: 0,\r\n    results: []\r\n};\r\n\r\nexport const emptySearchDefinition: SearchDefinitionValues = {\r\n    searchTerm: '',\r\n    searchTypeValue: 'Movies',\r\n    placeholderText: 'Search Movies'\r\n};\r\n\r\nexport const emptyDialogProps: DialogProperties = {\r\n    loading: false,\r\n    openDialog: false,\r\n    dialogItem: undefined,\r\n    genres: [],\r\n    keywords: [],\r\n    rating: 0,\r\n    ratingMessage: ''\r\n};","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../../service/DataService';\r\nimport { Configuration, SearchResults, TvShow, Movie, Result, Item, RatedMovie } from '../../../model';\r\nimport SearchContentResults from '../../controls/SearchContentResults';\r\nimport SearchDefinition from '../../controls/SearchDefinition';\r\nimport { HomeContainer, StyledPaper } from '../../controls/styled/CommonComponents';\r\nimport ItemDetailDialog from '../../controls/ItemDetailDialog';\r\nimport { stringConstants } from '../../../common/StringConstants';\r\nimport { emptyConfiguration, emptySearchResults, emptySearchDefinition, emptyDialogProps } from '../../../common/EmptyObjects';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: emptyConfiguration,\r\n            moviesGenres: [],\r\n            tvShowGenres: [],\r\n            searchResults: emptySearchResults,\r\n            searchDefinition: emptySearchDefinition,\r\n            searchSortValue:'Title',\r\n            imageUrlW185: '',\r\n            imageUrl: '',\r\n            dialogProps: emptyDialogProps\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const movieGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.movie);\r\n        const tvShowGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.tv);\r\n        const secureUrl: string = conf.images.secureBaseUrl !== ''\r\n                                ? conf.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${conf.images.posterSizes.w92}/` : '';\r\n        const imageUrlW185: string = secureUrl !== '' ? `${secureUrl}/${conf.images.posterSizes.w185}/` : '';\r\n\r\n        this.setState({ \r\n            configuration: conf, \r\n            moviesGenres: movieGenres, \r\n            tvShowGenres: tvShowGenres,\r\n            imageUrl: imageUrl,\r\n            imageUrlW185: imageUrlW185\r\n        });\r\n    }\r\n\r\n    handleChangeSearchType = (event: any) => {\r\n        const { value } = event.target;\r\n        const newPlaceHolder = `Search ${value}` ;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            searchTerm: '',\r\n                            searchTypeValue: value, \r\n                            placeholderText:newPlaceHolder\r\n                        },\r\n                        searchResults: {\r\n                            page: 0,\r\n                            totalPages: 0,\r\n                            totalResults: 0,\r\n                            results: []\r\n                        }\r\n                    }));\r\n    }\r\n\r\n    handleChangeSort = (event: any) => {\r\n        const { value } = event.target;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                    searchSortValue: value,\r\n                    }));\r\n    }    \r\n\r\n    handleOnChangeSearchInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { value } = event.currentTarget as HTMLInputElement;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            ...prevState.searchDefinition,\r\n                            searchTerm: value\r\n                        } \r\n                    }));        \r\n    }\r\n\r\n    sortResults = (results: Result[]) => {\r\n        switch(this.state.searchSortValue) {\r\n            case 'Title':\r\n                results.sort((a, b) => {\r\n                    if (a.title < b.title)\r\n                        return -1;\r\n                    if (a.title > b.title)\r\n                        return 1;\r\n                    return 0;\r\n                });\r\n                break;\r\n            case 'Release date': \r\n                results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                break;\r\n            case 'Vote average':\r\n                results.sort((a, b) => b.voteAverage - a.voteAverage);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleOnClickSearch = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, 1);\r\n                // searchMovieResults.results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                this.sortResults(searchMovieResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchMovieResults }));\r\n                break;\r\n            case 'TV Shows':\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, 1);\r\n                this.sortResults(searchTvShowResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchTvShowResults }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleLoadMoreResults = async () => {\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const stateMovieResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                const sortedMovieResults = stateMovieResults.concat(searchMovieResults.results);\r\n                this.sortResults(sortedMovieResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchMovieResults.page,\r\n                                totalPages: searchMovieResults.totalPages,\r\n                                totalResults: searchMovieResults.totalResults,\r\n                                results: sortedMovieResults\r\n                            } \r\n                }));\r\n                break;\r\n            case 'TV Shows':\r\n                const stateTvShowResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                    const sortedTvShowResults = stateTvShowResults.concat(searchTvShowResults.results);\r\n                    this.sortResults(sortedTvShowResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchTvShowResults.page,\r\n                                totalPages: searchTvShowResults.totalPages,\r\n                                totalResults: searchTvShowResults.totalResults,\r\n                                results: sortedTvShowResults\r\n                            } \r\n                }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    handleClickCard = (id: string) => {\r\n        const itemResult: Result = \r\n            this.state.searchResults.results.filter(item => item.id === +id)[0];\r\n\r\n        let genres: string[] = [];\r\n        switch (this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                if (itemResult.genreIds.length > 0) {\r\n                        genres = itemResult.genreIds.map(genreId => {\r\n                                return this.state.moviesGenres.filter(item => item.id === genreId)[0].name;\r\n                        });\r\n                }\r\n                break;\r\n            case 'TV Shows':\r\n                if (itemResult.genreIds.length > 0) {\r\n                        genres = itemResult.genreIds.map(genreId => {\r\n                            return this.state.tvShowGenres.filter(item => item.id === genreId)[0].name;\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                loading: true,\r\n                openDialog: true,\r\n                dialogItem: itemResult,\r\n                genres: genres\r\n            }\r\n        }));\r\n    }\r\n\r\n    handleDialogOk = (event: any) => {\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                openDialog: false,\r\n                rating: 0,\r\n                ratingMessage: ''\r\n            }\r\n        }));        \r\n    }\r\n\r\n    handleEntered = async (event: any) => {\r\n        const type: string = this.state.searchDefinition.searchTypeValue === 'Movies'\r\n                                ? stringConstants.apiEntities.movie\r\n                                : stringConstants.apiEntities.tv;\r\n        if (this.state.dialogProps.dialogItem) {\r\n            const keywords: Item[] = \r\n                await this.dataService.getKeywords(this.state.dialogProps.dialogItem.id.toString(), type);\r\n            let ratedMovie: RatedMovie | undefined = undefined;\r\n            if (this.state.searchDefinition.searchTypeValue === 'Movies')\r\n                ratedMovie = await this.dataService.getRatedMovie(this.state.dialogProps.dialogItem.id.toString());\r\n            this.setState(prevState => ({ ...prevState, \r\n                dialogProps: {\r\n                    ...prevState.dialogProps,\r\n                    loading: false, \r\n                    keywords: keywords,\r\n                    rating: ratedMovie && ratedMovie.ratedValue ? ratedMovie.ratedValue : 0\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRating = async(event: React.ChangeEvent<{}>, newValue: number | null) => {\r\n        if (this.state.dialogProps.dialogItem && newValue) {\r\n            const response = \r\n                await this.dataService.rateMovie(this.state.dialogProps.dialogItem.id.toString(), newValue);\r\n            let message: string = '';\r\n\r\n            if (response.status_code === 1) {\r\n                message = 'Rating done successfully!!';\r\n            }\r\n            if (response.status_code === 12) {\r\n                message = 'Rating updated successfully!!';\r\n            }\r\n            if (message)\r\n                this.setState(prevState => ({ ...prevState, \r\n                    dialogProps: {\r\n                        ...prevState.dialogProps,\r\n                        rating: newValue,\r\n                        ratingMessage: message\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HomeContainer>\r\n                <SearchDefinition searchTerm={this.state.searchDefinition.searchTerm} \r\n                                  searchTypeValue={this.state.searchDefinition.searchTypeValue} \r\n                                  placeHolderText={this.state.searchDefinition.placeholderText}\r\n                                  onChangeSearchInput={this.handleOnChangeSearchInput}\r\n                                  onChangeSearchType={this.handleChangeSearchType}\r\n                                  onClickSearch={this.handleOnClickSearch}\r\n                                  onChangeSort={this.handleChangeSort}\r\n                                  searchSortValue={this.state.searchSortValue}\r\n                />\r\n                {this.state.searchResults.totalResults === 0 &&\r\n                    <StyledPaper>No results</StyledPaper>\r\n                }                \r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchContentResults \r\n                        imageBaseUrl={this.state.imageUrl}\r\n                        hasMoreItems={this.state.searchResults.page < this.state.searchResults.totalPages}\r\n                        results={this.state.searchDefinition.searchTypeValue === '1'\r\n                                    ? (this.state.searchResults.results as Movie[])\r\n                                    : (this.state.searchResults.results as TvShow[])} \r\n                        loadResults={this.handleLoadMoreResults}\r\n                        onClickCard={this.handleClickCard}\r\n                        />\r\n                }\r\n\r\n                <ItemDetailDialog \r\n                    baseImageUrl={this.state.imageUrlW185}\r\n                    openDialog={this.state.dialogProps.openDialog}\r\n                    showBackdrop={this.state.dialogProps.loading}\r\n                    dialogItem={this.state.dialogProps.dialogItem && this.state.dialogProps.dialogItem}\r\n                    genres={this.state.dialogProps.genres}\r\n                    keywords={this.state.dialogProps.keywords}\r\n                    onEntered={this.handleEntered}\r\n                    onClickDialogOk={this.handleDialogOk}\r\n                    onChangeRating={this.handleRating}\r\n                    ratingValue={this.state.dialogProps.rating}\r\n                    ratingMessage={this.state.dialogProps.ratingMessage}\r\n                    type={this.state.searchDefinition.searchTypeValue}\r\n                />\r\n            </HomeContainer>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst About = () => {\r\n    return (\r\n        <Container>\r\n\r\n            <Typography variant=\"body1\" gutterBottom>\r\n                This is a test app to show the possibilities of React, being a class oriented approach.\r\n                The app offer these functionalities:\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n                - Search Movies\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n                - Search Tv Shows\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n                - Rate Movies\r\n            </Typography>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n                The API used in this app is The Movie Database API:\r\n            </Typography>\r\n            <a href='https://www.themoviedb.org/' target='_blank'>The Movie Database API</a>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n                You can see the code in the following GitHub repo :\r\n            </Typography>\r\n            <a href='https://github.com/maximo-calero/react-themoviedb-test' target='_blank'>React TheMovieDB Test Repo</a>\r\n\r\n\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { MyRatingsState } from './MyRatingsState';\r\nimport { MyRatingsProps } from './MyRatingsProps';\r\nimport { IDataService } from '../../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../../service/DataService';\r\nimport { Configuration, SearchResults, Movie, Item, Result, RatedMovie } from '../../../model';\r\nimport Container from '@material-ui/core/Container';\r\nimport { StyledPaper } from '../../controls/styled/CommonComponents';\r\nimport SearchContentResults from '../../controls/SearchContentResults';\r\nimport ItemDetailDialog from '../../controls/ItemDetailDialog';\r\nimport { stringConstants } from '../../../common/StringConstants';\r\nimport { emptyConfiguration, emptySearchResults, emptyDialogProps } from '../../../common/EmptyObjects';\r\n\r\nclass MyRatings extends React.Component<MyRatingsProps, MyRatingsState> {\r\n    dataService: IDataService;\r\n        \r\n    constructor(props: MyRatingsProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n        this.state = {\r\n            configuration: emptyConfiguration,\r\n            moviesGenres: [],\r\n            searchResults: emptySearchResults,\r\n            searchSortValue: '',\r\n            imageUrl: '',\r\n            imageUrlW185: '',\r\n            dialogProps: emptyDialogProps\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const movieGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.movie);\r\n        const secureUrl: string = conf.images.secureBaseUrl !== ''\r\n                                ? conf.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${conf.images.posterSizes.w92}/` : '';\r\n        const imageUrlW185: string = secureUrl !== '' ? `${secureUrl}/${conf.images.posterSizes.w185}/` : '';\r\n        const searchMovieResults: SearchResults = await this.dataService.getAccountRatedMovies(1);\r\n\r\n        this.setState({ \r\n            configuration: conf, \r\n            moviesGenres: movieGenres,\r\n            searchResults: searchMovieResults, \r\n            imageUrl: imageUrl,\r\n            imageUrlW185: imageUrlW185\r\n        });\r\n    }\r\n\r\n    handleLoadMoreResults = async () => {\r\n        const stateMovieResults: Result[] = this.state.searchResults.results.slice();\r\n        const searchMovieResults: SearchResults = \r\n            await this.dataService.getAccountRatedMovies(this.state.searchResults.page + 1);\r\n        const sortedMovieResults = stateMovieResults.concat(searchMovieResults.results);\r\n        this.setState(prevState => ({ ...prevState, searchResults: {\r\n                        page: searchMovieResults.page,\r\n                        totalPages: searchMovieResults.totalPages,\r\n                        totalResults: searchMovieResults.totalResults,\r\n                        results: sortedMovieResults\r\n                    } \r\n        }));\r\n    }\r\n\r\n    handleClickCard = (id: string) => {\r\n        const itemResult: Result = \r\n            this.state.searchResults.results.filter(item => item.id === +id)[0];\r\n\r\n        let genres: string[] = [];\r\n        if (itemResult.genreIds.length > 0) {\r\n            genres = itemResult.genreIds.map(genreId => {\r\n                    return this.state.moviesGenres.filter(item => item.id === genreId)[0].name;\r\n            });\r\n        }        \r\n\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                loading: true,\r\n                openDialog: true,\r\n                dialogItem: itemResult,\r\n                genres: genres\r\n            }\r\n        }));\r\n    }\r\n\r\n    handleDialogOk = (event: any) => {\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                openDialog: false,\r\n                rating: 0,\r\n                ratingMessage: ''\r\n            }\r\n        }));        \r\n    }\r\n\r\n    handleEntered = async (event: any) => {\r\n        if (this.state.dialogProps.dialogItem) {\r\n            const keywords: Item[] = \r\n                await this.dataService.getKeywords(this.state.dialogProps.dialogItem.id.toString(), stringConstants.apiEntities.movie);\r\n            let ratedMovie: RatedMovie | undefined = undefined;\r\n            ratedMovie = await this.dataService.getRatedMovie(this.state.dialogProps.dialogItem.id.toString());\r\n            this.setState(prevState => ({ ...prevState, \r\n                dialogProps: {\r\n                    ...prevState.dialogProps,\r\n                    loading: false, \r\n                    keywords: keywords,\r\n                    rating: ratedMovie && ratedMovie.ratedValue ? ratedMovie.ratedValue : 0\r\n                }\r\n            }));\r\n        }\r\n    }    \r\n\r\n    handleRating = async(event: React.ChangeEvent<{}>, newValue: number | null) => {\r\n        if (this.state.dialogProps.dialogItem && newValue) {\r\n            const response = \r\n                await this.dataService.rateMovie(this.state.dialogProps.dialogItem.id.toString(), newValue);\r\n            let message: string = '';\r\n\r\n            if (response.status_code === 1) {\r\n                message = 'Rating done successfully!!';\r\n            }\r\n            if (response.status_code === 12) {\r\n                message = 'Rating updated successfully!!';\r\n            }\r\n            if (message)\r\n                this.setState(prevState => ({ ...prevState, \r\n                    dialogProps: {\r\n                        ...prevState.dialogProps,\r\n                        rating: newValue,\r\n                        ratingMessage: message\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n            <Container>\r\n                {this.state.searchResults.totalResults === 0 &&\r\n                    <StyledPaper>No results</StyledPaper>\r\n                }                \r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchContentResults \r\n                        imageBaseUrl={this.state.imageUrl}\r\n                        hasMoreItems={this.state.searchResults.page < this.state.searchResults.totalPages}\r\n                        results={this.state.searchResults.results as Movie[]} \r\n                        loadResults={this.handleLoadMoreResults}\r\n                        onClickCard={this.handleClickCard}\r\n                    />\r\n                }\r\n                <ItemDetailDialog \r\n                    baseImageUrl={this.state.imageUrlW185}\r\n                    openDialog={this.state.dialogProps.openDialog}\r\n                    showBackdrop={this.state.dialogProps.loading}\r\n                    dialogItem={this.state.dialogProps.dialogItem && this.state.dialogProps.dialogItem}\r\n                    genres={this.state.dialogProps.genres}\r\n                    keywords={this.state.dialogProps.keywords}\r\n                    onEntered={this.handleEntered}\r\n                    onClickDialogOk={this.handleDialogOk}\r\n                    onChangeRating={this.handleRating}\r\n                    ratingValue={this.state.dialogProps.rating}\r\n                    ratingMessage={this.state.dialogProps.ratingMessage}\r\n                    type={'Movies'}\r\n                />                             \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyRatings;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from '../pages/home/Home';\r\nimport About from '../pages/about/About';\r\nimport MyRatings from '../pages/mySelection/MyRatings';\r\n\r\n\r\nconst Layout = () => {\r\n  return(\r\n    <main>\r\n      <Switch>\r\n        <Route exact path='/' component={Home}/>\r\n        <Route path='/my-rated-movies' component={MyRatings}/>\r\n        <Route path='/about' component={About}/>\r\n      </Switch>\r\n    </main>\r\n  )\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\nimport Header from '../header/Header';\r\nimport Layout from './Layout';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { AppContainer } from '../controls/styled/CommonComponents';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { styled as styledmui, MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    background: {\r\n      default: \"white\"\r\n    }\r\n  }\r\n});\r\n\r\nconst StyledHeading = styledmui(Typography)({\r\n  textAlign: 'center',\r\n  maxWidth: '100%',\r\n  fontSize: '3rem',\r\n  color: 'steelblue'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n      </MuiThemeProvider>\r\n      <AppContainer maxWidth=\"lg\">\r\n        <StyledHeading variant=\"h2\" gutterBottom>Movie Database Search</StyledHeading>\r\n        <Header />\r\n        <Layout />\r\n      </AppContainer>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/main/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}