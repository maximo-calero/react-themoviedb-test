{"version":3,"sources":["components/header/Header.tsx","common/StringConstants.ts","service/DataService.ts","components/home/Home.tsx","components/about/About.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","makeStyles","theme","createStyles","button","margin","spacing","Header","classes","Grid","container","direction","justify","alignItems","item","Button","variant","color","className","startIcon","to","stringConstants","DataService","apiUrl","apiKey","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","getApiJson","configuration","obj","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","searchTerm","query","searchMovie","total_results","page","totalResults","totalPages","total_pages","movies","results","map","id","title","overview","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","Home","props","dataService","emptyConfiguration","emptySearchResults","state","searchResults","getConfiguration","conf","searchMovies","testSearch","setState","secureUrl","completeImageUrl","key","src","React","Component","About","Main","exact","path","component","App","Fragment","CssBaseline","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03654176.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport HomeTwoTone from '@material-ui/icons/HomeTwoTone';\r\nimport InfoTwoTone from '@material-ui/icons/InfoTwoTone';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst styles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = styles();\r\n    return (\r\n        <header>\r\n            <Grid container\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"flex-start\"\r\n            >\r\n                <Grid item>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={classes.button}\r\n                        startIcon={<HomeTwoTone />}\r\n                    >\r\n                        <Link to='/'>Home</Link>\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={classes.button}\r\n                        startIcon={<InfoTwoTone />}\r\n                    >\r\n                        <Link to='/about'>About</Link>\r\n                    </Button>                \r\n                </Grid> \r\n            </Grid>\r\n               \r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'searchMovie': '/search/movie'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query='\r\n    }\r\n};","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY) {\r\n            this.apiUrl = process.env.API_URL\r\n            this.apiKey = process.env.API_KEY\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText)\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: obj.images.backdrop_sizes,\r\n                logoSizes: obj.images.logo_sizes,\r\n                posterSizes: obj.images.poster_sizes,\r\n                profileSizes: obj.images.profile_sizes,\r\n                stillSizes: obj.images.still_sizes\r\n            },\r\n            changeKeys: obj.change_keys\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n    public async searchMovies(searchTerm: string): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                movies: (obj.results as any[]).map(item => {\r\n                    return {\r\n                        id: item.id,\r\n                        title: item.title,\r\n                        overview: item.overview,\r\n                        popularity: item.popularity,\r\n                        video: item.video,\r\n                        voteCount: item.vote_count,\r\n                        voteAverage: item.vote_average,\r\n                        releaseDate: item.release_date,\r\n                        originalLanguage: item.original_language,\r\n                        originalTitle: item.original_title,\r\n                        genreIds: item.genre_ids,\r\n                        backdropPath: item.backdrop_path,\r\n                        adult: item.adult,\r\n                        posterPath: item.poster_path\r\n                    }\r\n                })\r\n            };    \r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                movies: []\r\n            };\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../service/DataService';\r\nimport { Configuration, SearchResults } from '../../model';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n    emptyConfiguration: Configuration = {\r\n            images: {\r\n                baseUrl: '',\r\n                secureBaseUrl: '',\r\n                backdropSizes: [],\r\n                logoSizes: [],\r\n                posterSizes: [],\r\n                profileSizes: [],\r\n                stillSizes: []\r\n            },\r\n            changeKeys: []\r\n    \r\n    };\r\n    emptySearchResults: SearchResults = {\r\n        page: 0,\r\n        totalPages: 0,\r\n        totalResults: 0,\r\n        movies: []\r\n    };\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: this.emptyConfiguration,\r\n            searchResults: this.emptySearchResults\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const testSearch: SearchResults = await this.dataService.searchMovies('Godfather');\r\n        this.setState({ configuration: conf, searchResults: testSearch });\r\n\r\n    }\r\n\r\n    render() {\r\n        const image: string = '/bVq65huQ8vHDd1a4Z37QtuyEvpA.jpg';\r\n        const baseUrl: string = this.state.configuration.images.baseUrl !== ''\r\n                                ? this.state.configuration.images.baseUrl\r\n                                : '';\r\n        const secureUrl: string = this.state.configuration.images.secureBaseUrl !== ''\r\n                                ? this.state.configuration.images.secureBaseUrl\r\n                                : '';\r\n        const completeImageUrl: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes[4]}/${image}` : '';\r\n\r\n        return (\r\n            <div>\r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    this.state.searchResults.movies.map(item => {\r\n                        return (\r\n                            <div key={item.id}>\r\n                                <p >{item.title}</p>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n                <p>Images URL</p>\r\n                {this.state.configuration.images.baseUrl !== '' &&\r\n                    <img src={completeImageUrl} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <p>About page</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\n\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/about' component={About}/>\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/Header';\r\nimport Main from './components/Main';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\">\r\n        <Header />\r\n        <Main />\r\n      </Container>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}