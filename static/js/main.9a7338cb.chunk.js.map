{"version":3,"sources":["images/default-image_300.png","components/styled/MenuComponents.ts","components/header/Header.tsx","common/StringConstants.ts","common/FunctionsHelper.ts","service/DataService.ts","components/common/styled/CommonComponents.ts","components/common/MediaCard.tsx","components/common/SearchContentResults.tsx","components/common/SearchDefinition.tsx","components/common/ItemDetailDialog.tsx","components/home/Home.tsx","components/about/About.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MenuBar","styled","ul","MenuItem","li","Header","to","stringConstants","stringToEnum","obj","reduce","res","key","Object","create","stringToDate","stringDate","stringArray","split","Date","DataService","apiUrl","apiKey","sessionId","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","type","getApiJson","genre","genres","length","map","item","id","name","keywords","results","configuration","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","serviceArray","title","overview","shortDescription","substr","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","first_air_date","originalName","original_name","originCountry","origin_country","searchTerm","page","query","toString","searchMovie","total_results","movies","getMoviesFromServiceArray","totalResults","totalPages","total_pages","searchTvShow","tvShows","getTvShowsFromServiceArray","urlPart","movie","accountStates","params","favorite","ratedValue","rated","value","watchList","watchlist","undefined","rateValue","objValue","postUrl","rating","method","headers","body","JSON","stringify","AppContainer","styledmui","Container","HomeContainer","display","flexDirection","alignItems","StyledCard","Card","width","height","StyledTitle","Typography","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","StyledDescription","StyledCardActionArea","CardActionArea","minHeight","StyledCardMedia","CardMedia","backgroundSize","StyledCardAction","CardActions","padding","justifyContent","StyledCardActionSpanDiv","div","StyledCardActionSpan","span","paddingLeft","StyledEventTwoTone","EventTwoTone","fill","transition","flexShrink","userSelect","StyledRateReviewTwoTone","RateReviewTwoTone","SearchMovieResultsContainer","flexGrow","StyledPaper","Paper","textAlign","color","SearchResults","InfiniteScroll","flexWrap","SearchResultItem","margin","boxSizing","MediaCard","handleClickCard","event","props","onClickCard","currentTarget","onClick","image","defaultImage","CardContent","gutterBottom","variant","contentTitle","contentDescription","titleAccess","React","Component","SearchContentResults","loader","className","items","imageBaseUrl","toLocaleDateString","pageStart","loadMore","loadResults","hasMore","hasMoreItems","useSearchDefinitionStyles","makeStyles","theme","createStyles","searchText","borderBottomColor","borderColor","marginLeft","marginBottom","searchPaper","backgroundColor","dropDown","searchIconButton","searchContainer","SearchDefinition","styles","component","TextField","select","label","searchTypeValue","onChange","onChangeSearchType","helperText","Grid","container","direction","justify","inputProps","onChangeSearchInput","placeHolderText","IconButton","aria-label","onClickSearch","searchSortValue","onChangeSort","useItemDialogStyles","firstColumn","marginRight","secondColumn","thirdColumn","chip","genreChip","keyWordChip","backdrop","zIndex","drawer","dialogActions","ItemDetailDialog","imageUrl","dialogItem","baseImageUrl","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","fullWidth","onEntered","aria-labelledby","open","openDialog","DialogTitle","DialogContent","Backdrop","showBackdrop","CircularProgress","src","alt","Chip","DialogActions","Box","mb","Rating","max","precision","ratingValue","onChangeRating","ratingMessage","Button","onClickDialogOk","Home","dataService","emptyConfiguration","emptySearchResults","handleChangeSearchType","target","newPlaceHolder","setState","prevState","searchDefinition","placeholderText","searchResults","handleChangeSort","handleOnChangeSearchInput","sortResults","state","sort","a","b","handleOnClickSearch","preventDefault","searchMovies","searchMovieResults","searchTvShows","searchTvShowResults","handleLoadMoreResults","stateMovieResults","slice","sortedMovieResults","concat","stateTvShowResults","sortedTvShowResults","itemResult","filter","genreId","moviesGenres","tvShowGenres","dialogProps","loading","handleDialogOk","handleEntered","tv","getKeywords","ratedMovie","getRatedMovie","handleRating","newValue","rateMovie","message","status_code","getConfiguration","conf","getGenres","movieGenres","secureUrl","w92","imageUrlW185","w185","About","Main","exact","path","createMuiTheme","palette","background","default","StyledHeading","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a7338cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-image_300.2d2ebf33.png\";","import styled from 'styled-components';\r\n\r\nexport const MenuBar = styled.ul `\r\n    list-style: none; \r\n    display: flex; \r\n    margin-top: 6px;\r\n    width: 85%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    font-size: 1.15em;\r\n    color: rgb(102, 102, 102);\r\n    width:100%;    \r\n`\r\n\r\nexport const MenuItem = styled.li `\r\n    flex: 3;\r\n    :hover {\r\n        color: rgb(0, 120, 212);\r\n    }\r\n    a {\r\n        display: block;\r\n        text-align: center;\r\n        padding: 5px 16px;\r\n        text-decoration: none;\r\n        color: rgb(102, 102, 102);        \r\n    }\r\n`","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { MenuBar, MenuItem } from '../styled/MenuComponents'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <MenuBar>\r\n                    <MenuItem><Link to='/'>Home</Link></MenuItem>\r\n                    <MenuItem><Link to='/about'>About</Link></MenuItem>\r\n                </MenuBar>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'account': '/account/%7Baccount_id%7D',\r\n        'genre': '/genre',\r\n        'movie': '/movie/',\r\n        'tv': '/tv/',\r\n        'keywords': '/keywords'\r\n    },\r\n    'verbs': {\r\n        'searchMovie': '/search/movie',\r\n        'searchTvShow': '/search/tv',\r\n        'rating': '/rating',\r\n        'ratedMovies': '/rated/movies',\r\n        'accountStates': '/account_states'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query=',\r\n        'page': '&page=',\r\n        'sessionId': '&session_id='\r\n    }\r\n};","export function stringToEnum<T extends string>(obj: Array<T>): {[K in T]: K} {\r\n    return obj.reduce((res, key) => {\r\n      res[key] = key;\r\n      return res;\r\n    }, Object.create(null));\r\n}\r\n\r\nexport function stringToDate(stringDate: string): Date{\r\n  const stringArray: string[] = stringDate.split('-');\r\n  return new Date(+stringArray[0], +stringArray[1], +stringArray[2]) ;\r\n}","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults, Movie, TvShow, Item, Result, RatedMovie } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\nimport { stringToEnum, stringToDate } from \"../common/FunctionsHelper\";\r\n\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n    private sessionId: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY && process.env.SESSION_ID) {\r\n            this.apiUrl = process.env.API_URL;\r\n            this.apiKey = process.env.API_KEY;\r\n            this.sessionId = process.env.SESSION_ID;\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    public async getGenres(type: string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${stringConstants.apiEntities.genre}${type}list`)\r\n        if (obj.genres.length > 0) {\r\n            return (obj.genres as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            })\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getKeywords(id: string, type:string): Promise<Item[]> {\r\n        const obj: any = await this.getApiJson(`${type}${id}${stringConstants.apiEntities.keywords}`);\r\n        \r\n        if (obj.keywords && obj.keywords.length > 0) {\r\n            return (obj.keywords as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            });\r\n        }else if (obj.results && obj.results.length){\r\n            return (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    name: item.name\r\n                };\r\n            });\r\n        }else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: stringToEnum(obj.images.backdrop_sizes),\r\n                logoSizes: stringToEnum(obj.images.logo_sizes),\r\n                posterSizes: stringToEnum(obj.images.poster_sizes),\r\n                profileSizes: stringToEnum(obj.images.profile_sizes),\r\n                stillSizes: stringToEnum(obj.images.still_sizes)\r\n            },\r\n            changeKeys: stringToEnum(obj.change_keys)\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n\r\n    private getMoviesFromServiceArray(serviceArray: any[]): Movie[]{\r\n        return serviceArray.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.title,\r\n                overview: item.overview,\r\n                shortDescription: item.overview \r\n                                    ? (item.overview as string).length > 60\r\n                                        ? `${(item.overview as string).substr(0, 60)}...`\r\n                                        : (item.overview as string)\r\n                                    : '',\r\n                popularity: item.popularity,\r\n                video: item.video,\r\n                voteCount: item.vote_count,\r\n                voteAverage: item.vote_average,\r\n                releaseDate: item.release_date && stringToDate(item.release_date),\r\n                originalLanguage: item.original_language,\r\n                originalTitle: item.original_title,\r\n                genreIds: item.genre_ids,\r\n                backdropPath: item.backdrop_path,\r\n                adult: item.adult,\r\n                posterPath: item.poster_path,\r\n            };\r\n        });\r\n    }\r\n\r\n    private getTvShowsFromServiceArray(serviceArray: any[]): TvShow[]{\r\n        return serviceArray.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.name,\r\n                overview: item.overview,\r\n                shortDescription: item.overview \r\n                                    ? (item.overview as string).length > 60\r\n                                        ? `${(item.overview as string).substr(0, 60)}...`\r\n                                        : (item.overview as string)\r\n                                    : '',\r\n                popularity: item.popularity,\r\n                voteCount: item.vote_count,\r\n                voteAverage: item.vote_average,\r\n                releaseDate: item.first_air_date && stringToDate(item.first_air_date),\r\n                originalName: item.original_name,\r\n                originCountry: item.origin_country,\r\n                originalLanguage: item.original_language,\r\n                genreIds: item.genre_ids,\r\n                backdropPath: item.backdrop_path,\r\n                posterPath: item.poster_path,\r\n            };\r\n        });\r\n    }    \r\n\r\n    public async searchMovies(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.verbs.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const movies: Movie[] = this.getMoviesFromServiceArray(obj.results as any[]);\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: movies\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async searchTvShows(searchTerm: string, page: number): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}${stringConstants.params.page}${page.toString()}`;\r\n        const obj: any = await this.getApiJson(stringConstants.verbs.searchTvShow, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const tvShows: TvShow[] = this.getTvShowsFromServiceArray(obj.results as any[]);\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: tvShows\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async getRatedMovie(id: string): Promise<RatedMovie | undefined> {\r\n        // const url: string= `${this.apiUrl}${stringConstants.apiEntities.movie}${id}${stringConstants.verbs.accountStates}${stringConstants.params.apiKey}${this.apiKey}${stringConstants.params.sessionId}${this.sessionId}`;\r\n        const urlPart: string = `${stringConstants.apiEntities.movie}${id}${stringConstants.verbs.accountStates}`;\r\n        const params: string = `${stringConstants.params.sessionId}${this.sessionId}`;\r\n        const obj = await this.getApiJson(urlPart, params);\r\n        if(obj) {\r\n            return {\r\n                id: obj.id,\r\n                favorite: obj.favorite,\r\n                ratedValue: obj.rated.value,\r\n                watchList: obj.watchlist\r\n            }\r\n        }else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public async rateMovie(id: string, rateValue: number): Promise<any> {\r\n        const objValue = {\r\n            value: rateValue\r\n        };\r\n        const postUrl: string = \r\n            `${this.apiUrl}${stringConstants.apiEntities.movie}${id}${stringConstants.verbs.rating}${stringConstants.params.apiKey}${this.apiKey}${stringConstants.params.sessionId}${this.sessionId}`;\r\n    \r\n        const response: Response = await fetch(postUrl, {\r\n            method: 'POST',\r\n            headers: { 'content-type': 'application/json;charset=utf-8' },\r\n            body: JSON.stringify(objValue)\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n}","import { styled as styledmui} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\n// import IconButton from '@material-ui/core/IconButton';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport styled from 'styled-components';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RateReviewTwoTone from '@material-ui/icons/RateReviewTwoTone';\r\nimport EventTwoTone from '@material-ui/icons/EventTwoTone';\r\n// import TextField from '@material-ui/core/TextField';\r\n\r\nexport const AppContainer = styledmui(Container)({\r\n\r\n});\r\n\r\nexport const HomeContainer = styledmui(Container)({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n});\r\n\r\nexport const StyledCard = styledmui(Card)({\r\n    width: 270,\r\n    height: 330,\r\n});\r\n\r\nexport const StyledTitle = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\nexport const StyledDescription = styledmui(Typography)({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.334,\r\n    letterSpacing: '0em',\r\n});\r\n\r\n\r\n\r\nexport const StyledCardActionArea = styledmui(CardActionArea)({\r\n    minHeight: 285,\r\n});\r\n\r\nexport const StyledCardMedia = styledmui(CardMedia)({\r\n    height: 140,\r\n    backgroundSize: 92,\r\n});\r\n\r\nexport const StyledCardAction = styledmui(CardActions)({\r\n    display: 'flex',\r\n    padding: 8,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n})\r\n\r\nexport const StyledCardActionSpanDiv = styled.div({\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n});\r\n\r\nexport const StyledCardActionSpan = styled.span({\r\n    fontSize: '0.9rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: 400,\r\n    lineHeight: 1.5,\r\n    letterSpacing: '0.00938em',\r\n    paddingLeft: '0.2rem'\r\n});\r\n\r\nexport const StyledEventTwoTone = styled(EventTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const StyledRateReviewTwoTone = styled(RateReviewTwoTone)({\r\n    fill: 'currentColor',\r\n    width: '1em',\r\n    height: '1em',\r\n    display: 'inline-block',\r\n    fontSize: '1.3rem',\r\n    transition: 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n    flexShrink: 0,\r\n    userSelect: 'none',\r\n});\r\n\r\nexport const SearchMovieResultsContainer = styledmui(Container) ({\r\n    flexGrow: 1,\r\n});\r\n\r\nexport const StyledPaper = styledmui(Paper) ({\r\n    padding: 12,\r\n    textAlign: 'center',\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n    width: '100%',\r\n    height: 400,   \r\n});\r\n\r\n// export const SearchDefinitionPaper = styledmui(Paper)({\r\n//     padding: '15px 10px 5px',\r\n//     marginBottom: 10,\r\n//     display: 'flex',\r\n//     alignItems: 'flex-start',\r\n//     width: '100%',\r\n//     backgroundColor: '#fff',\r\n//     flexWrap: 'wrap',\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-evenly',\r\n// });\r\n\r\n// export const SearchDefinitionIconButton = styledmui(IconButton)({\r\n//     padding: 10,\r\n// });\r\n\r\n// export const SearchInput = styledmui(TextField)({\r\n//     root: {\r\n//         '& label.Mui-focused': {\r\n//           color: 'green',\r\n//         },\r\n//         '& .MuiInput-underline:after': {\r\n//           borderBottomColor: 'green',\r\n//         },\r\n//         '& .MuiOutlinedInput-root': {\r\n//           '& fieldset': {\r\n//             borderColor: 'red',\r\n//           },\r\n//           '&:hover fieldset': {\r\n//             borderColor: 'yellow',\r\n//           },\r\n//           '&.Mui-focused fieldset': {\r\n//             borderColor: 'green',\r\n//           },\r\n//         },\r\n//       },\r\n//       marginLeft: 8,\r\n//       marginBottom: 15\r\n// });\r\n\r\nexport const SearchResults = styledmui(InfiniteScroll)({\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-start',\r\n});\r\n\r\nexport const SearchResultItem = styled.div({\r\n    padding: 4,\r\n\tmargin: 0,\r\n    boxSizing: 'border-box'\r\n});\r\n\r\n","import React from 'react';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { MediaCardProps } from './ControlInterfaces';\r\nimport { StyledCard, \r\n         StyledCardActionArea, \r\n         StyledCardMedia, \r\n         StyledCardAction, \r\n         StyledEventTwoTone, \r\n         StyledRateReviewTwoTone, \r\n         StyledDescription, \r\n         StyledTitle, \r\n         StyledCardActionSpan, \r\n         StyledCardActionSpanDiv } from './styled/CommonComponents';\r\nimport defaultImage from '../../images/default-image_300.png';\r\n\r\nclass MediaCard extends React.Component<MediaCardProps> {\r\n\r\n  handleClickCard = (event: any) => {\r\n    this.props.onClickCard(event.currentTarget.id)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCard>\r\n        <StyledCardActionArea \r\n          id={this.props.id.toString()}\r\n          onClick={this.handleClickCard}\r\n        >\r\n          <StyledCardMedia\r\n            image={this.props.image ? this.props.image : defaultImage}\r\n            title={this.props.title}\r\n          />\r\n          <CardContent>\r\n            <StyledTitle gutterBottom variant=\"h5\">\r\n              {this.props.contentTitle}\r\n            </StyledTitle>\r\n            <StyledDescription variant=\"body2\" color=\"textSecondary\">\r\n              {this.props.contentDescription ? this.props.contentDescription : 'No description provided'}\r\n            </StyledDescription>\r\n          </CardContent>\r\n        </StyledCardActionArea>\r\n        <StyledCardAction>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledEventTwoTone titleAccess='Release date' />\r\n            <StyledCardActionSpan>{this.props.releaseDate ? this.props.releaseDate : 'No Release Date Provided'}</StyledCardActionSpan>            \r\n          </StyledCardActionSpanDiv>\r\n          <StyledCardActionSpanDiv>\r\n            <StyledRateReviewTwoTone titleAccess='Vote average'/>\r\n            <StyledCardActionSpan>{this.props.voteAverage}</StyledCardActionSpan>\r\n          </StyledCardActionSpanDiv>\r\n        </StyledCardAction>\r\n      </StyledCard>\r\n    );\r\n  \r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport { SearchContentResultsProps } from './ControlInterfaces';\r\nimport { SearchMovieResultsContainer, SearchResults, SearchResultItem } from './styled/CommonComponents';\r\nimport MediaCard from './MediaCard';\r\n\r\nclass SearchContentResults extends React.Component<SearchContentResultsProps> {\r\n    handleClickCard = (id: string) => {\r\n        this.props.onClickCard(id)\r\n    }\r\n\r\n    render() {\r\n        const loader = <div key={0} className=\"loader\">Loading ...</div>;\r\n        const items = this.props.results.map(item => {\r\n            return (\r\n                <SearchResultItem key={item.id}>\r\n                    <MediaCard\r\n                            id={item.id}\r\n                            title={item.title} \r\n                            image={item.posterPath && `${this.props.imageBaseUrl}${item.posterPath}`}\r\n                            contentTitle={item.title}\r\n                            contentDescription={item.shortDescription}\r\n                            releaseDate={item.releaseDate && item.releaseDate.toLocaleDateString()}\r\n                            voteAverage={item.voteAverage}\r\n                            onClickCard={this.handleClickCard}\r\n                    />           \r\n                </SearchResultItem>                            \r\n            );\r\n        });\r\n        return(\r\n\r\n            <SearchMovieResultsContainer>\r\n                <SearchResults\r\n                    pageStart={1}\r\n                    loadMore={this.props.loadResults}\r\n                    hasMore={this.props.hasMoreItems}\r\n                    loader={loader}\r\n                >\r\n                    {this.props.results.length > 0 &&\r\n                        items\r\n                    }\r\n                </SearchResults>\r\n            </SearchMovieResultsContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchContentResults;","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { SearchDefinitionProps } from './ControlInterfaces';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createStyles, \r\n    makeStyles, \r\n    Theme } from '@material-ui/core/styles';\r\n\r\nexport const useSearchDefinitionStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        searchText: {\r\n            '& label.Mui-focused': {\r\n            color: 'green',\r\n            },\r\n            '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'green',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'rgba(0, 0, 0, 0.23)',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'blue',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'green',\r\n            },\r\n            },\r\n            marginLeft: 8,\r\n            marginBottom: 15,\r\n            width: '15rem'\r\n        },\r\n        searchPaper: {\r\n            padding: '15px 10px 5px',\r\n            marginBottom: 10,\r\n            display: 'flex',\r\n            alignItems: 'flex-start',\r\n            width: '100%',\r\n            backgroundColor: '#fff',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n        },\r\n        dropDown: {\r\n            marginBottom: 15,\r\n            width: '15rem'\r\n        },\r\n        searchIconButton: {\r\n            padding: 10,\r\n            width: '4rem',\r\n            height: '4rem',\r\n        },\r\n        searchContainer: {\r\n            width: '20rem'\r\n        }\r\n    })\r\n);\r\n\r\nconst SearchDefinition =(props: SearchDefinitionProps) => {\r\n    const styles = useSearchDefinitionStyles();\r\n    return(\r\n        <Paper component=\"form\" className={styles.searchPaper} >\r\n            <TextField\r\n                className={styles.dropDown}\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Search Type\"\r\n                value={props.searchTypeValue}\r\n                onChange={props.onChangeSearchType}\r\n                helperText=\"Please select your search type\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Movies'}>Movies</MenuItem>\r\n                <MenuItem value={'TV Shows'}>TV Shows</MenuItem>\r\n            </TextField>\r\n            <Grid className={styles.searchContainer} \r\n                  container \r\n                  direction='row' \r\n                  justify='center' \r\n                  alignItems='flex-start'\r\n            >\r\n                <TextField\r\n                    className={styles.searchText}\r\n                    inputProps={{ 'aria-label': 'search movies' }}\r\n                    onChange={props.onChangeSearchInput}\r\n                    value={props.searchTerm}\r\n                    label={props.placeHolderText}\r\n                    variant=\"outlined\"\r\n                />\r\n                <IconButton \r\n                    className={styles.searchIconButton}\r\n                    type=\"submit\"  \r\n                    aria-label=\"search\"\r\n                    onClick={props.onClickSearch}\r\n                >\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <TextField\r\n                className={styles.dropDown}\r\n                id=\"outlined-select-currency\"\r\n                select\r\n                label=\"Sort by\"\r\n                value={props.searchSortValue}\r\n                onChange={props.onChangeSort}\r\n                helperText=\"Please select the field to sort results\"\r\n                variant=\"outlined\"\r\n            >\r\n                <MenuItem value={'Title'}>Title</MenuItem>\r\n                <MenuItem value={'Release date'}>Release date</MenuItem>\r\n                <MenuItem value={'Vote average'}>Vote average (DESC)</MenuItem>\r\n            </TextField>              \r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default SearchDefinition;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ItemDetailDialogProps } from './ControlInterfaces';\r\nimport defaultImage from '../../images/default-image_300.png';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport { useTheme, createStyles, \r\n    makeStyles, \r\n    Theme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\r\n\r\n\r\nconst useItemDialogStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        firstColumn: {\r\n            marginRight: '0.900rem',\r\n            width: '13rem'\r\n        },\r\n        secondColumn: {\r\n            width: '20rem',\r\n            marginRight: '0.700rem'\r\n        },\r\n        thirdColumn: {\r\n            width: '20rem',\r\n        },\r\n        chip: {\r\n            margin: '0.200rem',\r\n        },\r\n        genreChip:{\r\n            backgroundColor: 'powderblue'\r\n        },\r\n        keyWordChip: {\r\n            backgroundColor: 'royalblue',\r\n            color: 'white'\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n        dialogActions: {\r\n            justifyContent: 'space-between'\r\n        }   \r\n    })\r\n);\r\n\r\n\r\nconst ItemDetailDialog = (props: ItemDetailDialogProps) => {\r\n    const imageUrl = props.dialogItem && props.dialogItem.posterPath \r\n                        ? `${props.baseImageUrl}${props.dialogItem?.posterPath}`\r\n                        : defaultImage;\r\n    const styles = useItemDialogStyles();\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    return (\r\n        <Dialog\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n            maxWidth=\"md\"\r\n            fullWidth={fullScreen}\r\n            onEntered={props.onEntered}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={props.openDialog}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\">{props.dialogItem && props.dialogItem.title}</DialogTitle>\r\n            <DialogContent>\r\n                <Backdrop className={styles.backdrop} open={props.showBackdrop}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n                <Grid container direction='row'>\r\n                    <Grid item className={styles.firstColumn}>\r\n                        <img src={imageUrl} alt={props.dialogItem && props.dialogItem.title} />\r\n                    </Grid>\r\n                    <Grid container direction='column' className={styles.secondColumn} >\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Overview\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" gutterBottom>\r\n                                {props.dialogItem && props.dialogItem.overview}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Popularity\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" gutterBottom>\r\n                                {props.dialogItem && props.dialogItem.popularity}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container direction='column' className={styles.thirdColumn}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Genres\r\n                            </Typography>\r\n                            <div>\r\n                                {props.genres.length > 0 &&\r\n                                    props.genres.map(item => {\r\n                                        return(\r\n                                            <Chip className={`${styles.chip} ${styles.genreChip}`} key={item} label={item} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {props.genres.length === 0 &&\r\n                                    <Typography>No genres provided</Typography>\r\n                                }                                    \r\n                            </div>                    \r\n                        </Grid>                            \r\n                        <Grid item>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Keywords\r\n                            </Typography>\r\n                            <div>\r\n                                {props.keywords.length > 0 &&\r\n                                    props.keywords.map(item => {\r\n                                        return(\r\n                                            <Chip className={`${styles.chip} ${styles.keyWordChip}`} key={item.id} label={item.name} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {props.keywords.length === 0 &&\r\n                                    <Typography>No keywords provided</Typography>\r\n                                }\r\n                            </div>                    \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions className={styles.dialogActions}>\r\n                <Grid container direction='column'>\r\n                    <Grid item>\r\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                            <Typography component=\"legend\">Vote average</Typography>\r\n                            <Rating\r\n                                name=\"vote-average\"\r\n                                value={props.dialogItem && props.dialogItem.voteAverage}\r\n                                max={10}\r\n                                precision={0.25}\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    {props.type === 'Movies' &&\r\n                        <Grid item>\r\n                            <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                                <Typography component=\"legend\">Your rating</Typography>\r\n                                <Rating\r\n                                    name=\"your-rating\"\r\n                                    value={props.ratingValue}\r\n                                    max={10}\r\n                                    precision={0.25}\r\n                                    onChange={props.onChangeRating}\r\n                                />\r\n                                <Typography component=\"span\">{props.ratingMessage && props.ratingMessage}</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n                <Button onClick={props.onClickDialogOk} color=\"primary\">\r\n                Ok\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>  \r\n    );\r\n}\r\n\r\nexport default ItemDetailDialog;","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../service/DataService';\r\nimport { Configuration, SearchResults, TvShow, Movie, Result, Item, RatedMovie } from '../../model';\r\nimport SearchContentResults from '../common/SearchContentResults';\r\nimport SearchDefinition from '../common/SearchDefinition';\r\nimport { HomeContainer, StyledPaper } from '../common/styled/CommonComponents';\r\nimport ItemDetailDialog from '../common/ItemDetailDialog';\r\nimport { stringConstants } from '../../common/StringConstants';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n    emptyConfiguration: Configuration = {\r\n            images: {\r\n                baseUrl: '',\r\n                secureBaseUrl: '',\r\n                backdropSizes: [],\r\n                logoSizes: [],\r\n                posterSizes: [],\r\n                profileSizes: [],\r\n                stillSizes: []\r\n            },\r\n            changeKeys: []\r\n    \r\n    };\r\n    emptySearchResults: SearchResults = {\r\n        page: 0,\r\n        totalPages: 0,\r\n        totalResults: 0,\r\n        results: []\r\n    };\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: this.emptyConfiguration,\r\n            moviesGenres: [],\r\n            tvShowGenres: [],\r\n            searchResults: this.emptySearchResults,\r\n            searchDefinition: {\r\n                searchTerm: '',\r\n                searchTypeValue: 'Movies',\r\n                placeholderText: 'Search Movies'\r\n            },\r\n            searchSortValue:'Title',\r\n            dialogProps: {\r\n                loading: false,\r\n                openDialog: false,\r\n                dialogItem: undefined,\r\n                genres: [],\r\n                keywords: [],\r\n                rating: 0,\r\n                ratingMessage: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        const movieGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.movie);\r\n        const tvShowGenres: Item[] = await this.dataService.getGenres(stringConstants.apiEntities.tv);\r\n        this.setState({ \r\n            configuration: conf, \r\n            moviesGenres: movieGenres, \r\n            tvShowGenres: tvShowGenres \r\n        });\r\n    }\r\n\r\n    handleChangeSearchType = (event: any) => {\r\n        const { value } = event.target;\r\n        const newPlaceHolder = `Search ${value}` ;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            searchTerm: '',\r\n                            searchTypeValue: value, \r\n                            placeholderText:newPlaceHolder\r\n                        },\r\n                        searchResults: {\r\n                            page: 0,\r\n                            totalPages: 0,\r\n                            totalResults: 0,\r\n                            results: []\r\n                        }\r\n                    }));\r\n    }\r\n\r\n    handleChangeSort = (event: any) => {\r\n        const { value } = event.target;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                    searchSortValue: value,\r\n                    }));\r\n    }    \r\n\r\n    handleOnChangeSearchInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { value } = event.currentTarget as HTMLInputElement;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            ...prevState.searchDefinition,\r\n                            searchTerm: value\r\n                        } \r\n                    }));        \r\n    }\r\n\r\n    sortResults = (results: Result[]) => {\r\n        switch(this.state.searchSortValue) {\r\n            case 'Title':\r\n                results.sort((a, b) => {\r\n                    if (a.title < b.title)\r\n                        return -1;\r\n                    if (a.title > b.title)\r\n                        return 1;\r\n                    return 0;\r\n                });\r\n                break;\r\n            case 'Release date': \r\n                results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                break;\r\n            case 'Vote average':\r\n                results.sort((a, b) => b.voteAverage - a.voteAverage);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleOnClickSearch = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, 1);\r\n                // searchMovieResults.results.sort((a, b) => +a.releaseDate - +b.releaseDate);\r\n                this.sortResults(searchMovieResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchMovieResults }));\r\n                break;\r\n            case 'TV Shows':\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, 1);\r\n                this.sortResults(searchTvShowResults.results);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchTvShowResults }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleLoadMoreResults = async () => {\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                const stateMovieResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                const sortedMovieResults = stateMovieResults.concat(searchMovieResults.results);\r\n                this.sortResults(sortedMovieResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchMovieResults.page,\r\n                                totalPages: searchMovieResults.totalPages,\r\n                                totalResults: searchMovieResults.totalResults,\r\n                                results: sortedMovieResults\r\n                            } \r\n                }));\r\n                break;\r\n            case 'TV Shows':\r\n                const stateTvShowResults: Result[] = this.state.searchResults.results.slice();\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm, this.state.searchResults.page + 1);\r\n                    const sortedTvShowResults = stateTvShowResults.concat(searchTvShowResults.results);\r\n                    this.sortResults(sortedTvShowResults);\r\n                this.setState(prevState => ({ ...prevState, searchResults: {\r\n                                page: searchTvShowResults.page,\r\n                                totalPages: searchTvShowResults.totalPages,\r\n                                totalResults: searchTvShowResults.totalResults,\r\n                                results: sortedTvShowResults\r\n                            } \r\n                }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    handleClickCard = (id: string) => {\r\n        const itemResult: Result = \r\n            this.state.searchResults.results.filter(item => item.id === +id)[0];\r\n\r\n        let genres: string[] = [];\r\n        switch (this.state.searchDefinition.searchTypeValue) {\r\n            case 'Movies':\r\n                if (itemResult.genreIds.length > 0) {\r\n                        genres = itemResult.genreIds.map(genreId => {\r\n                                return this.state.moviesGenres.filter(item => item.id === genreId)[0].name;\r\n                        });\r\n                }\r\n                break;\r\n            case 'TV Shows':\r\n                if (itemResult.genreIds.length > 0) {\r\n                        genres = itemResult.genreIds.map(genreId => {\r\n                            return this.state.tvShowGenres.filter(item => item.id === genreId)[0].name;\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                loading: true,\r\n                openDialog: true,\r\n                dialogItem: itemResult,\r\n                genres: genres\r\n            }\r\n        }));\r\n    }\r\n\r\n    handleDialogOk = (event: any) => {\r\n        this.setState(prevState => ({ ...prevState, \r\n            dialogProps: {\r\n                ...prevState.dialogProps,\r\n                openDialog: false,\r\n                rating: 0,\r\n                ratingMessage: ''\r\n            }\r\n        }));        \r\n    }\r\n\r\n    handleEntered = async (event: any) => {\r\n        const type: string = this.state.searchDefinition.searchTypeValue === 'Movies'\r\n                                ? stringConstants.apiEntities.movie\r\n                                : stringConstants.apiEntities.tv;\r\n        if (this.state.dialogProps.dialogItem) {\r\n            const keywords: Item[] = \r\n                await this.dataService.getKeywords(this.state.dialogProps.dialogItem.id.toString(), type);\r\n            let ratedMovie: RatedMovie | undefined = undefined;\r\n            if (this.state.searchDefinition.searchTypeValue === 'Movies')\r\n                ratedMovie = await this.dataService.getRatedMovie(this.state.dialogProps.dialogItem.id.toString());\r\n            this.setState(prevState => ({ ...prevState, \r\n                dialogProps: {\r\n                    ...prevState.dialogProps,\r\n                    loading: false, \r\n                    keywords: keywords,\r\n                    rating: ratedMovie && ratedMovie.ratedValue ? ratedMovie.ratedValue : 0\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleRating = async(event: React.ChangeEvent<{}>, newValue: number | null) => {\r\n        if (this.state.dialogProps.dialogItem && newValue) {\r\n            const response = \r\n                await this.dataService.rateMovie(this.state.dialogProps.dialogItem.id.toString(), newValue);\r\n            let message: string = '';\r\n\r\n            if (response.status_code === 1) {\r\n                message = 'Rating done successfully!!';\r\n            }\r\n            if (response.status_code === 12) {\r\n                message = 'Rating updated successfully!!';\r\n            }\r\n            if (message)\r\n                this.setState(prevState => ({ ...prevState, \r\n                    dialogProps: {\r\n                        ...prevState.dialogProps,\r\n                        rating: newValue,\r\n                        ratingMessage: message\r\n                    }\r\n                }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const secureUrl: string = this.state.configuration.images.secureBaseUrl !== ''\r\n                                ? this.state.configuration.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w92}/` : '';\r\n        const imageUrlW185: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w185}/` : '';\r\n        return (\r\n            <HomeContainer>\r\n                <SearchDefinition searchTerm={this.state.searchDefinition.searchTerm} \r\n                                  searchTypeValue={this.state.searchDefinition.searchTypeValue} \r\n                                  placeHolderText={this.state.searchDefinition.placeholderText}\r\n                                  onChangeSearchInput={this.handleOnChangeSearchInput}\r\n                                  onChangeSearchType={this.handleChangeSearchType}\r\n                                  onClickSearch={this.handleOnClickSearch}\r\n                                  onChangeSort={this.handleChangeSort}\r\n                                  searchSortValue={this.state.searchSortValue}\r\n                />\r\n                {this.state.searchResults.totalResults === 0 &&\r\n                    <StyledPaper>No results</StyledPaper>\r\n                }                \r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchContentResults \r\n                        imageBaseUrl={imageUrl}\r\n                        hasMoreItems={this.state.searchResults.page < this.state.searchResults.totalPages}\r\n                        results={this.state.searchDefinition.searchTypeValue === '1'\r\n                                    ? (this.state.searchResults.results as Movie[])\r\n                                    : (this.state.searchResults.results as TvShow[])} \r\n                        loadResults={this.handleLoadMoreResults}\r\n                        onClickCard={this.handleClickCard}\r\n                        />\r\n                }\r\n\r\n                <ItemDetailDialog \r\n                    baseImageUrl={imageUrlW185}\r\n                    openDialog={this.state.dialogProps.openDialog}\r\n                    showBackdrop={this.state.dialogProps.loading}\r\n                    dialogItem={this.state.dialogProps.dialogItem && this.state.dialogProps.dialogItem}\r\n                    genres={this.state.dialogProps.genres}\r\n                    keywords={this.state.dialogProps.keywords}\r\n                    onEntered={this.handleEntered}\r\n                    onClickDialogOk={this.handleDialogOk}\r\n                    onChangeRating={this.handleRating}\r\n                    ratingValue={this.state.dialogProps.rating}\r\n                    ratingMessage={this.state.dialogProps.ratingMessage}\r\n                    type={this.state.searchDefinition.searchTypeValue}\r\n                />\r\n            </HomeContainer>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <p>About page</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\n\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/about' component={About}/>\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport Header from './components/header/Header';\r\nimport Main from './components/Main';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { AppContainer } from './components/common/styled/CommonComponents';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { styled as styledmui, MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    background: {\r\n      default: \"white\"\r\n    }\r\n  }\r\n});\r\n\r\nconst StyledHeading = styledmui(Typography)({\r\n  textAlign: 'center',\r\n  maxWidth: '100%',\r\n  fontSize: '3rem',\r\n  color: 'steelblue'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n      </MuiThemeProvider>\r\n      <AppContainer maxWidth=\"lg\">\r\n        <StyledHeading variant=\"h2\" gutterBottom>Movie Database Search</StyledHeading>\r\n        <Header />\r\n        <Main />\r\n      </AppContainer>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}