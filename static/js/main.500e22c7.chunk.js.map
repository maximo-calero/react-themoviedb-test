{"version":3,"sources":["components/styled/MenuComponents.ts","components/header/Header.tsx","common/StringConstants.ts","common/FunctionsHelper.ts","service/DataService.ts","components/common/styled/CommonComponents.ts","components/common/MediaCard.tsx","components/common/SearchContentResults.tsx","components/common/SearchDefinition.tsx","components/home/Home.tsx","components/about/About.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuBar","styled","ul","MenuItem","li","Header","to","stringConstants","stringToEnum","obj","reduce","res","key","Object","create","stringToDate","stringDate","stringArray","split","Date","DataService","apiUrl","apiKey","this","process","entity","additionalParams","url","fetch","response","ok","Error","statusText","json","getApiJson","configuration","images","baseUrl","base_url","secureBaseUrl","secure_base_url","backdropSizes","backdrop_sizes","logoSizes","logo_sizes","posterSizes","poster_sizes","profileSizes","profile_sizes","stillSizes","still_sizes","changeKeys","change_keys","searchTerm","query","searchMovie","total_results","movies","results","map","item","id","title","overview","shortDescription","length","substr","popularity","video","voteCount","vote_count","voteAverage","vote_average","releaseDate","release_date","originalLanguage","original_language","originalTitle","original_title","genreIds","genre_ids","backdropPath","backdrop_path","adult","posterPath","poster_path","page","totalResults","totalPages","total_pages","searchTvShow","tvShows","name","first_air_date","originalName","original_name","originCountry","origin_country","AppContainer","Container","HomeContainer","display","flexDirection","alignItems","StyledCard","Card","width","height","StyledCardActionArea","CardActionArea","minHeight","StyledCardMedia","CardMedia","backgroundSize","SearchMovieResultsContainer","flexGrow","StyledPaper","Paper","padding","textAlign","color","SearchDefinitionPaper","marginBottom","backgroundColor","SearchDefinitionIconButton","IconButton","SearchDefinitionDivider","Divider","margin","SearchInput","InputBase","marginLeft","flex","MediaCard","props","image","CardContent","Typography","gutterBottom","variant","component","contentTitle","contentDescription","CardActions","Button","size","React","Component","SearchContentResults","Grid","container","direction","justify","spacing","imageBaseUrl","SearchDefinition","NativeSelect","value","searchTypeValue","onChange","onChangeSearchType","orientation","placeholder","placeHolderText","inputProps","onChangeSearchInput","type","aria-label","onClick","onClickSearch","Home","dataService","emptyConfiguration","emptySearchResults","handleChangeSearchType","event","currentTarget","selectedOptions","newPlaceHolder","text","setState","prevState","searchDefinition","placeholderText","searchResults","handleOnChangeSearchInput","handleOnClickSearch","a","preventDefault","state","searchMovies","searchMovieResults","searchTvShows","searchTvShowResults","getConfiguration","conf","secureUrl","imageUrl","w92","About","Main","exact","path","App","Fragment","CssBaseline","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.500e22c7.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const MenuBar = styled.ul `\r\n    list-style: none; \r\n    display: flex; \r\n    margin-top: 6px;\r\n    width: 85%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    font-size: 1.15em;\r\n    color: rgb(102, 102, 102);\r\n    width:80%;    \r\n`\r\n\r\nexport const MenuItem = styled.li `\r\n    flex: 3;\r\n    :hover {\r\n        color: rgb(0, 120, 212);\r\n    }\r\n    a {\r\n        display: block;\r\n        text-align: center;\r\n        padding: 5px 16px;\r\n        text-decoration: none;\r\n        color: rgb(102, 102, 102);        \r\n    }\r\n`","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { MenuBar, MenuItem } from '../styled/MenuComponents'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <MenuBar>\r\n                    <MenuItem><Link to='/'>Home</Link></MenuItem>\r\n                    <MenuItem><Link to='/about'>About</Link></MenuItem>\r\n                </MenuBar>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const stringConstants = {\r\n    'empty': '',\r\n    'apiEntities': {\r\n        'configuration': '/configuration',\r\n        'searchMovie': '/search/movie',\r\n        'searchTvShow': '/search/tv'\r\n    },\r\n    'params': {\r\n        'apiKey': '?api_key=',\r\n        'query': '&query='\r\n    }\r\n};","export function stringToEnum<T extends string>(obj: Array<T>): {[K in T]: K} {\r\n    return obj.reduce((res, key) => {\r\n      res[key] = key;\r\n      return res;\r\n    }, Object.create(null));\r\n}\r\n\r\nexport function stringToDate(stringDate: string): Date{\r\n  const stringArray: string[] = stringDate.split('-');\r\n  return new Date(+stringArray[0], +stringArray[1], +stringArray[2]) ;\r\n}","import { IDataService } from \"./DataServiceInterfaces\";\r\nimport { Configuration, SearchResults, Movie, TvShow } from \"../model\";\r\nimport { stringConstants } from \"../common/StringConstants\";\r\nimport { stringToEnum, stringToDate } from \"../common/FunctionsHelper\";\r\n\r\n\r\nexport class DataService implements IDataService {\r\n    private apiUrl: string;\r\n    private apiKey: string;\r\n\r\n    constructor() {\r\n        if (process.env.API_URL && process.env.API_KEY) {\r\n            this.apiUrl = process.env.API_URL\r\n            this.apiKey = process.env.API_KEY\r\n        }else {\r\n            throw new Error('API Url is not configured');\r\n        }\r\n    }\r\n\r\n    private async getApiJson(entity: string, additionalParams?: string): Promise<any> {\r\n        let url = additionalParams \r\n                    ? `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}${additionalParams}`\r\n                    : `${this.apiUrl}${entity}${stringConstants.params.apiKey}${this.apiKey}`;\r\n        const response: Response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText)\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    public async getConfiguration(): Promise<Configuration> {\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.configuration)\r\n        const configuration: Configuration = {\r\n            images: {\r\n                baseUrl: obj.images.base_url,\r\n                secureBaseUrl: obj.images.secure_base_url,\r\n                backdropSizes: stringToEnum(obj.images.backdrop_sizes),\r\n                logoSizes: stringToEnum(obj.images.logo_sizes),\r\n                posterSizes: stringToEnum(obj.images.poster_sizes),\r\n                profileSizes: stringToEnum(obj.images.profile_sizes),\r\n                stillSizes: stringToEnum(obj.images.still_sizes)\r\n            },\r\n            changeKeys: stringToEnum(obj.change_keys)\r\n        };\r\n        return configuration;\r\n    }\r\n\r\n    public async searchMovies(searchTerm: string): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchMovie, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const movies: Movie[] = (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.title,\r\n                    overview: item.overview,\r\n                    shortDescription: item.overview \r\n                                        ? (item.overview as string).length > 60\r\n                                            ? `${(item.overview as string).substr(0, 60)}...`\r\n                                            : (item.overview as string)\r\n                                        : '',\r\n                    popularity: item.popularity,\r\n                    video: item.video,\r\n                    voteCount: item.vote_count,\r\n                    voteAverage: item.vote_average,\r\n                    releaseDate: stringToDate(item.release_date),\r\n                    originalLanguage: item.original_language,\r\n                    originalTitle: item.original_title,\r\n                    genreIds: item.genre_ids,\r\n                    backdropPath: item.backdrop_path,\r\n                    adult: item.adult,\r\n                    posterPath: item.poster_path\r\n                };\r\n            });\r\n\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: movies\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }\r\n\r\n    public async searchTvShows(searchTerm: string): Promise<SearchResults> {\r\n        const query: string= `${stringConstants.params.query}${searchTerm}`;\r\n        const obj: any = await this.getApiJson(stringConstants.apiEntities.searchTvShow, query);\r\n\r\n        if (obj.total_results > 0) {\r\n            const tvShows: TvShow[] = (obj.results as any[]).map(item => {\r\n                return {\r\n                    id: item.id,\r\n                    title: item.name,\r\n                    overview: item.overview,\r\n                    shortDescription: item.overview \r\n                                        ? (item.overview as string).length > 60\r\n                                            ? `${(item.overview as string).substr(0, 60)}...`\r\n                                            : (item.overview as string)\r\n                                        : '',\r\n                    popularity: item.popularity,\r\n                    voteCount: item.vote_count,\r\n                    voteAverage: item.vote_average,\r\n                    releaseDate: item.first_air_date && stringToDate(item.first_air_date),\r\n                    originalName: item.original_name,\r\n                    originCountry: item.origin_country,\r\n                    originalLanguage: item.original_language,\r\n                    genreIds: item.genre_ids,\r\n                    backdropPath: item.backdrop_path,\r\n                    posterPath: item.poster_path\r\n                };\r\n            });\r\n\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: tvShows\r\n            };\r\n        }else {\r\n            return {\r\n                page: obj.page,\r\n                totalResults: obj.total_results,\r\n                totalPages: obj.total_pages,\r\n                results: []\r\n            };\r\n        }\r\n    }    \r\n}","import { styled } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nexport const AppContainer = styled(Container)({\r\n\r\n});\r\n\r\nexport const HomeContainer = styled(Container)({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n});\r\n\r\nexport const StyledCard = styled(Card)({\r\n    width: 345,\r\n    height: 330,\r\n});\r\n\r\nexport const StyledCardActionArea = styled(CardActionArea)({\r\n    minHeight: 285,\r\n});\r\n\r\nexport const StyledCardMedia = styled(CardMedia)({\r\n    height: 140,\r\n    backgroundSize: 92,\r\n});\r\n\r\nexport const SearchMovieResultsContainer = styled(Container) ({\r\n    flexGrow: 1,\r\n});\r\n\r\nexport const StyledPaper = styled(Paper) ({\r\n    padding: 12,\r\n    textAlign: 'center',\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n    width: '60%',\r\n    height: 400,   \r\n});\r\n\r\nexport const SearchDefinitionPaper = styled(Paper)({\r\n    padding: '0px 4px',\r\n    marginBottom: 10,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '60%',\r\n    backgroundColor: '#fff',\r\n});\r\n\r\nexport const SearchDefinitionIconButton = styled(IconButton)({\r\n    padding: 10,\r\n});\r\n\r\nexport const SearchDefinitionDivider = styled(Divider)({\r\n    height: 28,\r\n    margin: 4,\r\n});\r\n\r\nexport const SearchInput = styled(InputBase)({\r\n    marginLeft: 8,\r\n    flex: 1,\r\n});\r\n\r\n","import React from 'react';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { MediaCardProps } from './ControlInterfaces';\r\nimport { StyledCard, StyledCardActionArea, StyledCardMedia } from './styled/CommonComponents';\r\n\r\nclass MediaCard extends React.Component<MediaCardProps> {\r\n  constructor(props: MediaCardProps) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StyledCard>\r\n        <StyledCardActionArea>\r\n          <StyledCardMedia\r\n            image={this.props.image}\r\n            title={this.props.title}\r\n\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {this.props.contentTitle}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {this.props.contentDescription}\r\n            </Typography>\r\n          </CardContent>\r\n        </StyledCardActionArea>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Learn More\r\n          </Button>\r\n        </CardActions>\r\n      </StyledCard>\r\n    );\r\n  \r\n  }\r\n};\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport { SearchContentResultsProps } from './ControlInterfaces';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { SearchMovieResultsContainer } from './styled/CommonComponents';\r\nimport MediaCard from './MediaCard';\r\n\r\nclass SearchContentResults extends React.Component<SearchContentResultsProps> {\r\n    constructor(props: SearchContentResultsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <SearchMovieResultsContainer>\r\n                <Grid container \r\n                      direction='row' \r\n                      justify='center' \r\n                      alignItems='flex-start' \r\n                      spacing={1}\r\n                >\r\n                    {this.props.results.length > 0 &&\r\n                        this.props.results.map(item => {\r\n                            return (\r\n                                <Grid key={item.id} item>\r\n                                    <MediaCard \r\n                                            title={item.title} \r\n                                            image={`${this.props.imageBaseUrl}${item.posterPath}`}\r\n                                            contentTitle={item.title}\r\n                                            contentDescription={item.shortDescription}\r\n                                                />                                \r\n                                </Grid>                            \r\n                            );\r\n                        })\r\n\r\n                    }\r\n                </Grid>\r\n            </SearchMovieResultsContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchContentResults;","import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { SearchDefinitionPaper, \r\n         SearchDefinitionIconButton, \r\n         SearchDefinitionDivider, \r\n         SearchInput} from './styled/CommonComponents';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport { SearchDefinitionProps } from './ControlInterfaces';\r\n\r\nconst SearchDefinition =(props: SearchDefinitionProps) => {\r\n    return(\r\n        <SearchDefinitionPaper component=\"form\" >\r\n            <NativeSelect\r\n                id=\"demo-customized-select-native\"\r\n                value={props.searchTypeValue}\r\n                onChange={props.onChangeSearchType}\r\n            >\r\n                <option value={1}>Movies</option>\r\n                <option value={2}>TV Shows</option>\r\n            </NativeSelect>            \r\n            <SearchDefinitionDivider  orientation=\"vertical\" />\r\n            <SearchInput\r\n                placeholder={props.placeHolderText}\r\n                inputProps={{ 'aria-label': 'search movies' }}\r\n                onChange={props.onChangeSearchInput}\r\n                value={props.searchTerm}\r\n            />\r\n            <SearchDefinitionIconButton \r\n                type=\"submit\"  \r\n                aria-label=\"search\"\r\n                onClick={props.onClickSearch}\r\n            >\r\n                <SearchIcon />\r\n            </SearchDefinitionIconButton>\r\n\r\n        </SearchDefinitionPaper>\r\n    );\r\n}\r\n\r\nexport default SearchDefinition;","import React from 'react';\r\nimport { HomeProps } from './HomeProps';\r\nimport { HomeState } from './HomeState';\r\nimport { IDataService } from '../../service/DataServiceInterfaces';\r\nimport { DataService } from '../../service/DataService';\r\nimport { Configuration, SearchResults, TvShow, Movie } from '../../model';\r\nimport SearchContentResults from '../common/SearchContentResults';\r\nimport SearchDefinition from '../common/SearchDefinition';\r\nimport { HomeContainer, StyledPaper } from '../common/styled/CommonComponents';\r\n\r\nclass Home extends React.Component<HomeProps, HomeState>  {\r\n    dataService: IDataService;\r\n    emptyConfiguration: Configuration = {\r\n            images: {\r\n                baseUrl: '',\r\n                secureBaseUrl: '',\r\n                backdropSizes: [],\r\n                logoSizes: [],\r\n                posterSizes: [],\r\n                profileSizes: [],\r\n                stillSizes: []\r\n            },\r\n            changeKeys: []\r\n    \r\n    };\r\n    emptySearchResults: SearchResults = {\r\n        page: 0,\r\n        totalPages: 0,\r\n        totalResults: 0,\r\n        results: []\r\n    };\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.dataService = new DataService();\r\n\r\n        this.state = {\r\n            configuration: this.emptyConfiguration,\r\n            searchResults: this.emptySearchResults,\r\n            searchDefinition: {\r\n                searchTerm: '',\r\n                searchTypeValue: '1',\r\n                placeholderText: 'Search Movies in The Movie Database API'\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const conf: Configuration = await this.dataService.getConfiguration();\r\n        this.setState({ configuration: conf });\r\n    }\r\n\r\n    handleChangeSearchType = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        const { value, selectedOptions } = event.currentTarget as HTMLSelectElement;\r\n        const newPlaceHolder = `Search ${selectedOptions[0].text} in The Movie Database API` ;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            searchTerm: '',\r\n                            searchTypeValue: value, \r\n                            placeholderText:newPlaceHolder\r\n                        },\r\n                        searchResults: {\r\n                            page: 0,\r\n                            totalPages: 0,\r\n                            totalResults: 0,\r\n                            results: []\r\n                        }\r\n                    }));\r\n    }\r\n\r\n    handleOnChangeSearchInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { value } = event.currentTarget as HTMLInputElement;\r\n        this.setState(prevState => ({ \r\n                    ...prevState, \r\n                        searchDefinition: { \r\n                            ...prevState.searchDefinition,\r\n                            searchTerm: value\r\n                        } \r\n                    }));        \r\n    }\r\n\r\n    handleOnClickSearch = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        switch(this.state.searchDefinition.searchTypeValue) {\r\n            case '1':\r\n                const searchMovieResults: SearchResults = \r\n                    await this.dataService.searchMovies(this.state.searchDefinition.searchTerm);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchMovieResults }));\r\n                break;\r\n            case '2':\r\n                const searchTvShowResults: SearchResults = \r\n                    await this.dataService.searchTvShows(this.state.searchDefinition.searchTerm);\r\n                this.setState(prevState => ({ ...prevState, searchResults: searchTvShowResults }));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const searchResults: SearchResults = \r\n            await this.dataService.searchMovies(this.state.searchDefinition.searchTerm);\r\n        this.setState(prevState => ({ ...prevState, searchResults: searchResults }));\r\n    }\r\n\r\n    render() {\r\n        const secureUrl: string = this.state.configuration.images.secureBaseUrl !== ''\r\n                                ? this.state.configuration.images.secureBaseUrl\r\n                                : '';\r\n        const imageUrl: string = secureUrl !== '' ? `${secureUrl}/${this.state.configuration.images.posterSizes.w92}/` : '';\r\n        return (\r\n            <HomeContainer>\r\n                <SearchDefinition searchTerm={this.state.searchDefinition.searchTerm} \r\n                                  searchTypeValue={this.state.searchDefinition.searchTypeValue} \r\n                                  placeHolderText={this.state.searchDefinition.placeholderText}\r\n                                  onChangeSearchInput={this.handleOnChangeSearchInput}\r\n                                  onChangeSearchType={this.handleChangeSearchType}\r\n                                  onClickSearch={this.handleOnClickSearch}\r\n                />\r\n                {this.state.searchResults.totalResults === 0 &&\r\n                    <StyledPaper>No results</StyledPaper>\r\n                }                \r\n                {this.state.searchResults.totalResults > 0 &&\r\n                    <SearchContentResults \r\n                        imageBaseUrl={imageUrl} \r\n                        results={this.state.searchDefinition.searchTypeValue === '1'\r\n                                    ? (this.state.searchResults.results as Movie[])\r\n                                    : (this.state.searchResults.results as TvShow[])} \r\n                        />\r\n                }\r\n            </HomeContainer>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <p>About page</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './home/Home';\r\nimport About from './about/About';\r\n\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path='/' component={Home}/>\r\n      <Route path='/about' component={About}/>\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header/Header';\r\nimport Main from './components/Main';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { AppContainer } from './components/common/styled/CommonComponents';\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppContainer maxWidth=\"lg\">\r\n        <Header />\r\n        <Main />\r\n      </AppContainer>\r\n    </React.Fragment>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}